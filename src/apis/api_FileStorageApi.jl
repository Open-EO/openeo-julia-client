# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct FileStorageApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `FileStorageApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ FileStorageApi }) = "https://openeo.example/api/v1"

const _returntypes_delete_file_FileStorageApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_delete_file(_api::FileStorageApi, path::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_file_FileStorageApi, "/files/{path}", ["Bearer", ])
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a file from the workspace

Deletes an existing user-uploaded file specified by its path. Resulting empty folders MUST be deleted automatically.  Back-ends MAY support deleting folders including its files and sub-folders. If not supported by the back-end a `FileOperationUnsupported` error MUST be sent as response.

Params:
- path::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_file(_api::FileStorageApi, path::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_file(_api, path; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_file(_api::FileStorageApi, response_stream::Channel, path::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_file(_api, path; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_download_file_FileStorageApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_download_file(_api::FileStorageApi, path::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_download_file_FileStorageApi, "/files/{path}", ["Bearer", ])
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/octet-stream", "application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Download a file from the workspace

Offers a file from the user workspace for download. The file is identified by its path relative to the user's root directory. If a folder is specified as path a `FileOperationUnsupported` error MUST be sent as response.

Params:
- path::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function download_file(_api::FileStorageApi, path::String; _mediaType=nothing)
    _ctx = _oacinternal_download_file(_api, path; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function download_file(_api::FileStorageApi, response_stream::Channel, path::String; _mediaType=nothing)
    _ctx = _oacinternal_download_file(_api, path; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_files_FileStorageApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => WorkspaceFiles,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_list_files(_api::FileStorageApi; limit=nothing, _mediaType=nothing)
    OpenAPI.validate_param("limit", "list_files", :minimum, limit, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_files_FileStorageApi, "/files", ["Bearer", ])
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List all files in the workspace

Lists all user-uploaded files that are stored at the back-end.

Params:
- limit::Int64

Return: WorkspaceFiles, OpenAPI.Clients.ApiResponse
"""
function list_files(_api::FileStorageApi; limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_files(_api; limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_files(_api::FileStorageApi, response_stream::Channel; limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_files(_api; limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_upload_file_FileStorageApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_upload_file(_api::FileStorageApi, path::String, body::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_upload_file_FileStorageApi, "/files/{path}", ["Bearer", ], body)
    OpenAPI.Clients.set_param(_ctx.path, "path", path)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/octet-stream", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload a file to the workspace

Uploads a new file to the given path or updates an existing file if a file at the path exists.  Folders are created once required by a file upload. Empty folders can't be created.

Params:
- path::String (required)
- body::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function upload_file(_api::FileStorageApi, path::String, body::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_file(_api, path, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function upload_file(_api::FileStorageApi, response_stream::Channel, path::String, body::String; _mediaType=nothing)
    _ctx = _oacinternal_upload_file(_api, path, body; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_file
export download_file
export list_files
export upload_file
