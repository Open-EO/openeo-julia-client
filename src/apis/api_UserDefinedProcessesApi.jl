# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct UserDefinedProcessesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `UserDefinedProcessesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ UserDefinedProcessesApi }) = "https://openeo.example/api/v1"

const _returntypes_delete_custom_process_UserDefinedProcessesApi = Dict{Regex,Type}(
    Regex("^" * replace("204", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_delete_custom_process(_api::UserDefinedProcessesApi, process_graph_id::String; _mediaType=nothing)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_custom_process_UserDefinedProcessesApi, "/process_graphs/{process_graph_id}", ["Bearer", ])
    OpenAPI.Clients.set_param(_ctx.path, "process_graph_id", process_graph_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a user-defined process

Deletes the data related to this user-defined process, including its process graph.  Does NOT delete jobs or services that reference this user-defined process.

Params:
- process_graph_id::String (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function delete_custom_process(_api::UserDefinedProcessesApi, process_graph_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_custom_process(_api, process_graph_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_custom_process(_api::UserDefinedProcessesApi, response_stream::Channel, process_graph_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_custom_process(_api, process_graph_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_describe_custom_process_UserDefinedProcessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UserDefinedProcess,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_describe_custom_process(_api::UserDefinedProcessesApi, process_graph_id::String; _mediaType=nothing)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_describe_custom_process_UserDefinedProcessesApi, "/process_graphs/{process_graph_id}", ["Bearer", ])
    OpenAPI.Clients.set_param(_ctx.path, "process_graph_id", process_graph_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Full metadata for a user-defined process

Lists all information about a user-defined process, including its process graph.

Params:
- process_graph_id::String (required)

Return: UserDefinedProcess, OpenAPI.Clients.ApiResponse
"""
function describe_custom_process(_api::UserDefinedProcessesApi, process_graph_id::String; _mediaType=nothing)
    _ctx = _oacinternal_describe_custom_process(_api, process_graph_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function describe_custom_process(_api::UserDefinedProcessesApi, response_stream::Channel, process_graph_id::String; _mediaType=nothing)
    _ctx = _oacinternal_describe_custom_process(_api, process_graph_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_custom_processes_UserDefinedProcessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => UserDefinedProcesses,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_list_custom_processes(_api::UserDefinedProcessesApi; limit=nothing, _mediaType=nothing)
    OpenAPI.validate_param("limit", "list_custom_processes", :minimum, limit, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_custom_processes_UserDefinedProcessesApi, "/process_graphs", ["Bearer", ])
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""List all user-defined processes

Lists all user-defined processes (process graphs) of the authenticated user that are stored at the back-end.  It is **strongly RECOMMENDED** to keep the response size small by omitting larger optional values from the objects in `processes` (e.g. the `exceptions`, `examples` and `links` properties). To get the full metadata for a user-defined process clients MUST request `GET /process_graphs/{process_graph_id}`.

Params:
- limit::Int64

Return: UserDefinedProcesses, OpenAPI.Clients.ApiResponse
"""
function list_custom_processes(_api::UserDefinedProcessesApi; limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_custom_processes(_api; limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_custom_processes(_api::UserDefinedProcessesApi, response_stream::Channel; limit=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_custom_processes(_api; limit=limit, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_store_custom_process_UserDefinedProcessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Nothing,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_store_custom_process(_api::UserDefinedProcessesApi, process_graph_id::String, process_graph_with_metadata::ProcessGraphWithMetadata; _mediaType=nothing)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "PUT", _returntypes_store_custom_process_UserDefinedProcessesApi, "/process_graphs/{process_graph_id}", ["Bearer", ], process_graph_with_metadata)
    OpenAPI.Clients.set_param(_ctx.path, "process_graph_id", process_graph_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Store a user-defined process

Stores a provided user-defined process with process graph that can be reused in other processes.  If a process with the specified `process_graph_id` exists, the process is fully replaced. The id can't be changed for existing user-defined processes. The id MUST be unique across its namespace.  Partially updating user-defined processes is not supported.  To simplify exchanging user-defined processes, the property `id` can be part of the request body. If the values don't match, the value for `id` gets replaced with the value from the `process_graph_id` parameter in the path.

Params:
- process_graph_id::String (required)
- process_graph_with_metadata::ProcessGraphWithMetadata (required)

Return: Nothing, OpenAPI.Clients.ApiResponse
"""
function store_custom_process(_api::UserDefinedProcessesApi, process_graph_id::String, process_graph_with_metadata::ProcessGraphWithMetadata; _mediaType=nothing)
    _ctx = _oacinternal_store_custom_process(_api, process_graph_id, process_graph_with_metadata; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function store_custom_process(_api::UserDefinedProcessesApi, response_stream::Channel, process_graph_id::String, process_graph_with_metadata::ProcessGraphWithMetadata; _mediaType=nothing)
    _ctx = _oacinternal_store_custom_process(_api, process_graph_id, process_graph_with_metadata; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_validate_custom_process_UserDefinedProcessesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ValidationResult,
    Regex("^" * replace("4XX", "x"=>".") * "\$") => Error,
    Regex("^" * replace("5XX", "x"=>".") * "\$") => Error,
)

function _oacinternal_validate_custom_process(_api::UserDefinedProcessesApi, process_graph_with_metadata::ProcessGraphWithMetadata; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_validate_custom_process_UserDefinedProcessesApi, "/validation", ["Bearer", ], process_graph_with_metadata)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Validate a user-defined process (graph)

Validates a user-defined process without executing it. A user-defined process is considered valid unless the `errors` array in the response contains at least one error.  Checks whether the process graph is schematically correct and the processes are supported by the back-end. It MUST also check the arguments against the schema, but checking whether the arguments are adequate in the context of data is OPTIONAL. For example, a non-existing band name may get rejected only by a few back-ends. The validation MUST NOT throw an error for unresolvable process parameters.  Back-ends MUST validate the process graph. Validating the corresponding metadata is OPTIONAL.  Errors that usually occur during processing MAY NOT get reported, e.g. if a referenced file is accessible at the time of execution.  Back-ends can either report all errors at once or stop the validation once they found the first error.   Please note that a validation always returns with HTTP status code 200. Error codes in the 4xx and 5xx ranges MUST be returned only when the general validation request is invalid (e.g. server is busy or properties in the request body are missing), but never if an error was found during validation of the user-defined process (e.g. an unsupported process).

Params:
- process_graph_with_metadata::ProcessGraphWithMetadata (required)

Return: ValidationResult, OpenAPI.Clients.ApiResponse
"""
function validate_custom_process(_api::UserDefinedProcessesApi, process_graph_with_metadata::ProcessGraphWithMetadata; _mediaType=nothing)
    _ctx = _oacinternal_validate_custom_process(_api, process_graph_with_metadata; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function validate_custom_process(_api::UserDefinedProcessesApi, response_stream::Channel, process_graph_with_metadata::ProcessGraphWithMetadata; _mediaType=nothing)
    _ctx = _oacinternal_validate_custom_process(_api, process_graph_with_metadata; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_custom_process
export describe_custom_process
export list_custom_processes
export store_custom_process
export validate_custom_process
