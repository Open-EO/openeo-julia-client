# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Billing_Plan

    BillingPlan(;
        name=nothing,
        description=nothing,
        paid=nothing,
        url=nothing,
    )

    - name::String : Name of the plan. It MUST be accepted in a *case insensitive* manner throughout the API.
    - description::String : A description that gives a rough overview over the plan.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - paid::Bool : Indicates whether the plan is a paid plan (&#x60;true&#x60;) or a free plan (&#x60;false&#x60;).
    - url::String : URL to a web page with more details about the plan.
"""
Base.@kwdef mutable struct BillingPlan <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    paid::Union{Nothing, Bool} = nothing
    url::Union{Nothing, String} = nothing

    function BillingPlan(name, description, paid, url, )
        OpenAPI.validate_property(BillingPlan, Symbol("name"), name)
        OpenAPI.validate_property(BillingPlan, Symbol("description"), description)
        OpenAPI.validate_property(BillingPlan, Symbol("paid"), paid)
        OpenAPI.validate_property(BillingPlan, Symbol("url"), url)
        return new(name, description, paid, url, )
    end
end # type BillingPlan

const _property_types_BillingPlan = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("paid")=>"Bool", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ BillingPlan }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BillingPlan[name]))}

function check_required(o::BillingPlan)
    o.name === nothing && (return false)
    o.description === nothing && (return false)
    o.paid === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BillingPlan }, name::Symbol, val)
    if name === Symbol("description")
        OpenAPI.validate_param(name, "BillingPlan", :format, val, "commonmark")
    end
    if name === Symbol("url")
        OpenAPI.validate_param(name, "BillingPlan", :format, val, "uri")
    end
end
