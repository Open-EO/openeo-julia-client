# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Default_OpenID_Connect_Client

    DefaultOpenIDConnectClient(;
        id=nothing,
        grant_types=nothing,
        redirect_urls=nothing,
    )

    - id::String : The OpenID Connect Client ID to be used in the authentication procedure.
    - grant_types::Vector{String} : List of authorization grant types (flows) supported by the OpenID Connect client. A grant type descriptor consist of a OAuth 2.0 grant type, with an additional &#x60;+pkce&#x60; suffix when the grant type should be used with the PKCE extension as defined in [RFC 7636](https://www.rfc-editor.org/rfc/rfc7636.html).  Allowed values: - &#x60;implicit&#x60;: Implicit Grant as specified in [RFC 6749, sec. 1.3.2](https://www.rfc-editor.org/rfc/rfc6749.html#section-1.3.2) - &#x60;authorization_code&#x60; / &#x60;authorization_code+pkce&#x60;: Authorization Code Grant as specified in [RFC 6749, sec. 1.3.1](https://www.rfc-editor.org/rfc/rfc6749.html#section-1.3.1), with or without PKCE extension. - &#x60;urn:ietf:params:oauth:grant-type:device_code&#x60; / &#x60;urn:ietf:params:oauth:grant-type:device_code+pkce&#x60;: Device Authorization Grant (aka Device Code Flow) as specified in [RFC 8628](https://www.rfc-editor.org/rfc/rfc8628.html), with or without PKCE extension. Note that the combination of this grant with the PKCE extension is *not standardized* yet. - &#x60;refresh_token&#x60;: Refresh Token as specified in [RFC 6749, sec. 1.5](https://www.rfc-editor.org/rfc/rfc6749.html#section-1.5)
    - redirect_urls::Vector{String} : List of redirect URLs that are whitelisted by the OpenID Connect client. Redirect URLs MUST be provided when the OpenID Connect client supports the Implicit Grant or the Authorization Code Grant (with or without PKCE extension).
"""
Base.@kwdef mutable struct DefaultOpenIDConnectClient <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    grant_types::Union{Nothing, Vector{String}} = nothing
    redirect_urls::Union{Nothing, Vector{String}} = nothing

    function DefaultOpenIDConnectClient(id, grant_types, redirect_urls, )
        OpenAPI.validate_property(DefaultOpenIDConnectClient, Symbol("id"), id)
        OpenAPI.validate_property(DefaultOpenIDConnectClient, Symbol("grant_types"), grant_types)
        OpenAPI.validate_property(DefaultOpenIDConnectClient, Symbol("redirect_urls"), redirect_urls)
        return new(id, grant_types, redirect_urls, )
    end
end # type DefaultOpenIDConnectClient

const _property_types_DefaultOpenIDConnectClient = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("grant_types")=>"Vector{String}", Symbol("redirect_urls")=>"Vector{String}", )
OpenAPI.property_type(::Type{ DefaultOpenIDConnectClient }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DefaultOpenIDConnectClient[name]))}

function check_required(o::DefaultOpenIDConnectClient)
    o.id === nothing && (return false)
    o.grant_types === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DefaultOpenIDConnectClient }, name::Symbol, val)
    if name === Symbol("grant_types")
        OpenAPI.validate_param(name, "DefaultOpenIDConnectClient", :enum, val, [])
    end
    if name === Symbol("redirect_urls")
        OpenAPI.validate_param(name, "DefaultOpenIDConnectClient", :uniqueItems, val, true)
    end
end
