# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""dimension_bands

    DimensionBands(;
        type=nothing,
        description=nothing,
        values=nothing,
    )

    - type::String : Type of the dimension.
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - values::Vector{CollectionDimensionValuesInner} : A set of all potential values, especially useful for [nominal](https://en.wikipedia.org/wiki/Level_of_measurement#Nominal_level) values.  **Important:** The order of the values MUST be exactly how the dimension values are also ordered in the data (cube). If the values specify band names, the values MUST be in the same order as they are in the corresponding band fields (i.e. &#x60;eo:bands&#x60; or &#x60;sar:bands&#x60;).
"""
Base.@kwdef mutable struct DimensionBands <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    values::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CollectionDimensionValuesInner} }

    function DimensionBands(type, description, values, )
        OpenAPI.validate_property(DimensionBands, Symbol("type"), type)
        OpenAPI.validate_property(DimensionBands, Symbol("description"), description)
        OpenAPI.validate_property(DimensionBands, Symbol("values"), values)
        return new(type, description, values, )
    end
end # type DimensionBands

const _property_types_DimensionBands = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("description")=>"String", Symbol("values")=>"Vector{CollectionDimensionValuesInner}", )
OpenAPI.property_type(::Type{ DimensionBands }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DimensionBands[name]))}

function check_required(o::DimensionBands)
    o.type === nothing && (return false)
    o.values === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DimensionBands }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "DimensionBands", :enum, val, ["spatial", "temporal", "bands", "geometry", "other"])
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "DimensionBands", :format, val, "commonmark")
    end
    if name === Symbol("values")
        OpenAPI.validate_param(name, "DimensionBands", :minItems, val, 1)
    end
end
