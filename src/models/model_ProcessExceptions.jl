# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Process_Exceptions

    ProcessExceptions(;
        description=nothing,
        message=nothing,
        http=400,
    )

    - description::String : Detailed description to explain the error to client users and back-end developers. This should not be shown in the clients directly, but MAY be linked to in the errors &#x60;url&#x60; property.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - message::String : Explains the reason the server is rejecting the request. This message is intended to be displayed to the client user. For \&quot;4xx\&quot; error codes the message SHOULD explain shortly how the client needs to modify the request.  The message MAY contain variables, which are enclosed by curly brackets. Example: &#x60;{variable_name}&#x60;
    - http::Int64 : HTTP Status Code, following the [error handling conventions in openEO](#section/API-Principles/Error-Handling). Defaults to &#x60;400&#x60;.
"""
Base.@kwdef mutable struct ProcessExceptions <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    http::Union{Nothing, Int64} = 400

    function ProcessExceptions(description, message, http, )
        OpenAPI.validate_property(ProcessExceptions, Symbol("description"), description)
        OpenAPI.validate_property(ProcessExceptions, Symbol("message"), message)
        OpenAPI.validate_property(ProcessExceptions, Symbol("http"), http)
        return new(description, message, http, )
    end
end # type ProcessExceptions

const _property_types_ProcessExceptions = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("message")=>"String", Symbol("http")=>"Int64", )
OpenAPI.property_type(::Type{ ProcessExceptions }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProcessExceptions[name]))}

function check_required(o::ProcessExceptions)
    o.message === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProcessExceptions }, name::Symbol, val)
    if name === Symbol("description")
        OpenAPI.validate_param(name, "ProcessExceptions", :format, val, "commonmark")
    end
end
