# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""log_entry_path_inner

    LogEntryPathInner(;
        node_id=nothing,
        process_id=nothing,
        namespace=nothing,
        parameter=nothing,
    )

    - node_id::String : The id of the node the log entry originates from.
    - process_id::String : The identifier for the process. It MUST be unique across its namespace (e.g. predefined processes or user-defined processes).  Clients SHOULD warn the user if a user-defined process is added with the  same identifier as one of the predefined process.
    - namespace::String : The namespace the &#x60;process_id&#x60; is valid for.  The following options are predefined by the openEO API, but additional namespaces may be introduced by back-ends or in a future version of the API.  * &#x60;null&#x60; (default): Checks both user-defined and predefined processes,    but prefers user-defined processes if both are available.    This allows users to add missing predefined processes for portability,    e.g. common processes from [processes.openeo.org](https://processes.openeo.org)    that have a process graph included.    It is RECOMMENDED to log the namespace selected by the back-end for debugging purposes. * &#x60;backend&#x60;: Uses exclusively the predefined processes listed at &#x60;GET /processes&#x60;. * &#x60;user&#x60;: Uses exclusively the user-defined processes listed at &#x60;GET /process_graphs&#x60;.  If multiple processes with the same identifier exist, Clients SHOULD inform the user that it&#39;s recommended to select a namespace.
    - parameter::String : If applicable, the name of the parameter the log entry corresponds to.
"""
Base.@kwdef mutable struct LogEntryPathInner <: OpenAPI.APIModel
    node_id::Union{Nothing, String} = nothing
    process_id::Union{Nothing, String} = nothing
    namespace::Union{Nothing, String} = nothing
    parameter::Union{Nothing, String} = nothing

    function LogEntryPathInner(node_id, process_id, namespace, parameter, )
        OpenAPI.validate_property(LogEntryPathInner, Symbol("node_id"), node_id)
        OpenAPI.validate_property(LogEntryPathInner, Symbol("process_id"), process_id)
        OpenAPI.validate_property(LogEntryPathInner, Symbol("namespace"), namespace)
        OpenAPI.validate_property(LogEntryPathInner, Symbol("parameter"), parameter)
        return new(node_id, process_id, namespace, parameter, )
    end
end # type LogEntryPathInner

const _property_types_LogEntryPathInner = Dict{Symbol,String}(Symbol("node_id")=>"String", Symbol("process_id")=>"String", Symbol("namespace")=>"String", Symbol("parameter")=>"String", )
OpenAPI.property_type(::Type{ LogEntryPathInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LogEntryPathInner[name]))}

function check_required(o::LogEntryPathInner)
    o.node_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ LogEntryPathInner }, name::Symbol, val)
    if name === Symbol("process_id")
        OpenAPI.validate_param(name, "LogEntryPathInner", :pattern, val, r"^\w+$")
    end
    if name === Symbol("parameter")
        OpenAPI.validate_param(name, "LogEntryPathInner", :pattern, val, r"^\w+$")
    end
end
