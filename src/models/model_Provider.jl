# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Provider

    Provider(;
        name=nothing,
        description=nothing,
        roles=nothing,
        url=nothing,
    )

    - name::String : The name of the organization or the individual.
    - description::String : Multi-line description to add further provider information such as processing details for processors and producers, hosting details for hosts or basic contact information.  CommonMark 0.29 syntax MAY be used for rich text representation.
    - roles::Vector{String} : Roles of the provider.  The provider&#39;s role(s) can be one or more of the following elements: * &#x60;licensor&#x60;: The organization that is licensing the dataset under the license specified in the collection&#39;s license field. * &#x60;producer&#x60;: The producer of the data is the provider that initially captured and processed the source data, e.g. ESA for Sentinel-2 data. * &#x60;processor&#x60;: A processor is any provider who processed data to a derived product. * &#x60;host&#x60;: The host is the actual provider offering the data on their storage. There SHOULD be no more than one host, specified as last element of the list.
    - url::String : Homepage on which the provider describes the dataset and publishes contact information.
"""
Base.@kwdef mutable struct Provider <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    roles::Union{Nothing, Vector{String}} = nothing
    url::Union{Nothing, String} = nothing

    function Provider(name, description, roles, url, )
        OpenAPI.validate_property(Provider, Symbol("name"), name)
        OpenAPI.validate_property(Provider, Symbol("description"), description)
        OpenAPI.validate_property(Provider, Symbol("roles"), roles)
        OpenAPI.validate_property(Provider, Symbol("url"), url)
        return new(name, description, roles, url, )
    end
end # type Provider

const _property_types_Provider = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("roles")=>"Vector{String}", Symbol("url")=>"String", )
OpenAPI.property_type(::Type{ Provider }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Provider[name]))}

function check_required(o::Provider)
    o.name === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Provider }, name::Symbol, val)
    if name === Symbol("roles")
        OpenAPI.validate_param(name, "Provider", :enum, val, [])
    end
    if name === Symbol("url")
        OpenAPI.validate_param(name, "Provider", :format, val, "uri")
    end
end
