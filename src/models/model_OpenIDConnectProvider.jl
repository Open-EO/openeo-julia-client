# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OpenID_Connect_Provider

    OpenIDConnectProvider(;
        id=nothing,
        issuer=nothing,
        scopes=nothing,
        title=nothing,
        description=nothing,
        default_clients=nothing,
        links=nothing,
    )

    - id::String : A per-backend **unique** identifier for the OpenID Connect Provider to be as prefix for the Bearer token.
    - issuer::String : The [issuer location](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfig) (also referred to as &#39;authority&#39; in some client libraries) is the URL of the OpenID Connect provider, which conforms to a set of rules: 1. After appending &#x60;/.well-known/openid-configuration&#x60; to the URL, a [HTTP/1.1 GET request](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationRequest) to the concatenated URL MUST return a [OpenID Connect Discovery Configuration Response](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderConfigurationResponse). The response provides all information required to authenticate using OpenID Connect. 2. The URL MUST NOT contain a terminating forward slash &#x60;/&#x60;.
    - scopes::Vector{String} : A list of OpenID Connect scopes that the client MUST at least include when requesting authorization. Clients MAY add additional scopes such as the &#x60;offline_access&#x60; scope to retrieve a refresh token. If scopes are specified, the list MUST at least contain the &#x60;openid&#x60; scope.
    - title::String : The name that is publicly shown in clients for this OpenID Connect provider.
    - description::String : A description that explains how the authentication procedure works.  It should make clear how to register and get credentials. This should include instruction on setting up &#x60;client_id&#x60;, &#x60;client_secret&#x60; and &#x60;redirect_uri&#x60;.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - default_clients::Vector{DefaultOpenIDConnectClient} : List of default OpenID Connect clients that can be used by an openEO client for OpenID Connect based authentication.  A default OpenID Connect client is managed by the back-end implementer. It MUST be configured to be usable without a client secret, which limits its applicability to OpenID Connect grant types like \&quot;Authorization Code Grant with PKCE\&quot; and \&quot;Device Authorization Grant with PKCE\&quot;  A default OpenID Connect client is provided without availability guarantees. The back-end implementer CAN revoke, reset or update it any time. As such, openEO clients SHOULD NOT store or cache default OpenID Connect client information for long term usage. A default OpenID Connect client is intended to simplify authentication for novice users. For production use cases, it is RECOMMENDED to set up a dedicated OpenID Connect client.
    - links::Vector{Link} : Links related to this provider, for example a help page or a page to register a new user account.  For relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
"""
Base.@kwdef mutable struct OpenIDConnectProvider <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    issuer::Union{Nothing, String} = nothing
    scopes::Union{Nothing, Vector{String}} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    default_clients::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DefaultOpenIDConnectClient} }
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }

    function OpenIDConnectProvider(id, issuer, scopes, title, description, default_clients, links, )
        OpenAPI.validate_property(OpenIDConnectProvider, Symbol("id"), id)
        OpenAPI.validate_property(OpenIDConnectProvider, Symbol("issuer"), issuer)
        OpenAPI.validate_property(OpenIDConnectProvider, Symbol("scopes"), scopes)
        OpenAPI.validate_property(OpenIDConnectProvider, Symbol("title"), title)
        OpenAPI.validate_property(OpenIDConnectProvider, Symbol("description"), description)
        OpenAPI.validate_property(OpenIDConnectProvider, Symbol("default_clients"), default_clients)
        OpenAPI.validate_property(OpenIDConnectProvider, Symbol("links"), links)
        return new(id, issuer, scopes, title, description, default_clients, links, )
    end
end # type OpenIDConnectProvider

const _property_types_OpenIDConnectProvider = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("issuer")=>"String", Symbol("scopes")=>"Vector{String}", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("default_clients")=>"Vector{DefaultOpenIDConnectClient}", Symbol("links")=>"Vector{Link}", )
OpenAPI.property_type(::Type{ OpenIDConnectProvider }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OpenIDConnectProvider[name]))}

function check_required(o::OpenIDConnectProvider)
    o.id === nothing && (return false)
    o.issuer === nothing && (return false)
    o.title === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OpenIDConnectProvider }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "OpenIDConnectProvider", :pattern, val, r"[\d\w]{1,20}")
    end
    if name === Symbol("issuer")
        OpenAPI.validate_param(name, "OpenIDConnectProvider", :format, val, "uri")
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "OpenIDConnectProvider", :format, val, "commonmark")
    end
    if name === Symbol("default_clients")
        OpenAPI.validate_param(name, "OpenIDConnectProvider", :uniqueItems, val, true)
    end
end
