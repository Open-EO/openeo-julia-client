# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Endpoint

    Endpoint(;
        path=nothing,
        methods=nothing,
    )

    - path::String : Path to the endpoint, relative to the URL of this endpoint. In general the paths MUST follow the paths specified in the openAPI specification as closely as possible. Therefore, paths MUST be prepended with a leading slash, but MUST NOT contain a trailing slash. Variables in the paths MUST be placed in curly braces and follow the parameter names in the openAPI specification, e.g. &#x60;{job_id}&#x60;.
    - methods::Vector{String} : Supported HTTP verbs in uppercase. It is OPTIONAL to list &#x60;OPTIONS&#x60; as method (see the [CORS section](#section/Cross-Origin-Resource-Sharing-(CORS))).
"""
Base.@kwdef mutable struct Endpoint <: OpenAPI.APIModel
    path::Union{Nothing, String} = nothing
    methods::Union{Nothing, Vector{String}} = nothing

    function Endpoint(path, methods, )
        OpenAPI.validate_property(Endpoint, Symbol("path"), path)
        OpenAPI.validate_property(Endpoint, Symbol("methods"), methods)
        return new(path, methods, )
    end
end # type Endpoint

const _property_types_Endpoint = Dict{Symbol,String}(Symbol("path")=>"String", Symbol("methods")=>"Vector{String}", )
OpenAPI.property_type(::Type{ Endpoint }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Endpoint[name]))}

function check_required(o::Endpoint)
    o.path === nothing && (return false)
    o.methods === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Endpoint }, name::Symbol, val)
    if name === Symbol("methods")
        OpenAPI.validate_param(name, "Endpoint", :enum, val, [])
    end
end
