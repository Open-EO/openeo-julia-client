# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""User_Data
Holds user information. If no budget or storage limit applies to the user account the corresponding properties MUST be set to null.

    UserData(;
        user_id=nothing,
        name=nothing,
        default_plan=nothing,
        storage=nothing,
        budget=nothing,
        links=nothing,
    )

    - user_id::String : A unique user identifier specific to the back-end, which could either be chosen by a user or is automatically generated by the back-end during the registration process at the back-end. It is meant to be used as an identifier in URIs (e.g. for sharing purposes), which is primarily used in machine-to-machine communication. Preferrably use the human-readable property &#x60;name&#x60; to display the user&#39;s name in user interfaces instead of the user identifier.
    - name::String : The user name, a human-friendly displayable name. Could be  the user&#39;s real name or a nickname.
    - default_plan::String : Name of the single plan the user is currently subscribed to if any.
    - storage::UserStorage
    - budget::Float64 : The remaining budget a user has available. The value MUST be specified in the currency of the back-end. The value SHOULD be set to &#x60;null&#x60; if no explicit limit applies.
    - links::Vector{Link} : Links related to the user profile, e.g. where payments are handled or the user profile could be edited.  It is RECOMMENDED to provide links with the following &#x60;rel&#x60; (relation) types:  1. &#x60;payment&#x60;: A page where users can recharge their user account with money or credits.  2. &#x60;edit-form&#x60;: Points to a page where the user can edit his user profile.  3. &#x60;alternate&#x60;: Any other representation of these (and potentially additional) user information, e.g. the (public) user profile page. It is RECOMMENDED to add descriptive titles for a better user experience.  4. &#x60;related&#x60;: Any other user-specific links to be shown in clients, e.g. to user-specific settings, invoices, etc. It is RECOMMENDED to  add descriptive titles for a better user experience.  For additional relation types see also the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
"""
Base.@kwdef mutable struct UserData <: OpenAPI.APIModel
    user_id::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    default_plan::Union{Nothing, String} = nothing
    storage = nothing # spec type: Union{ Nothing, UserStorage }
    budget::Union{Nothing, Float64} = nothing
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }

    function UserData(user_id, name, default_plan, storage, budget, links, )
        OpenAPI.validate_property(UserData, Symbol("user_id"), user_id)
        OpenAPI.validate_property(UserData, Symbol("name"), name)
        OpenAPI.validate_property(UserData, Symbol("default_plan"), default_plan)
        OpenAPI.validate_property(UserData, Symbol("storage"), storage)
        OpenAPI.validate_property(UserData, Symbol("budget"), budget)
        OpenAPI.validate_property(UserData, Symbol("links"), links)
        return new(user_id, name, default_plan, storage, budget, links, )
    end
end # type UserData

const _property_types_UserData = Dict{Symbol,String}(Symbol("user_id")=>"String", Symbol("name")=>"String", Symbol("default_plan")=>"String", Symbol("storage")=>"UserStorage", Symbol("budget")=>"Float64", Symbol("links")=>"Vector{Link}", )
OpenAPI.property_type(::Type{ UserData }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserData[name]))}

function check_required(o::UserData)
    o.user_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UserData }, name::Symbol, val)
    if name === Symbol("user_id")
        OpenAPI.validate_param(name, "UserData", :pattern, val, r"^[\w\-\.~]+$")
    end
end
