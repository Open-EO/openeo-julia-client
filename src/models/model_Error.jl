# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""error
An error object declares additional information about a client-side or server-side error. See also: * [Error Handling](#section/API-Principles/Error-Handling) in the API in general. * [Common Error Codes](errors.json)

    Error(;
        id=nothing,
        code=nothing,
        message=nothing,
        links=nothing,
    )

    - id::String : A back-end MAY add a unique identifier to the error response to be able to log and track errors with further non-disclosable details. A client could communicate this id to a back-end provider to get further information.
    - code::String : The code is either one of the standardized error codes or a custom code, for example specified by a user in the &#x60;inspect&#x60; process.
    - message::String : A message explaining what the client may need to change or what difficulties the server is facing.
    - links::Vector{Link} : Links related to this log entry / error, e.g. to a resource that provides further explanations.  For relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
"""
Base.@kwdef mutable struct Error <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    code::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }

    function Error(id, code, message, links, )
        OpenAPI.validate_property(Error, Symbol("id"), id)
        OpenAPI.validate_property(Error, Symbol("code"), code)
        OpenAPI.validate_property(Error, Symbol("message"), message)
        OpenAPI.validate_property(Error, Symbol("links"), links)
        return new(id, code, message, links, )
    end
end # type Error

const _property_types_Error = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("code")=>"String", Symbol("message")=>"String", Symbol("links")=>"Vector{Link}", )
OpenAPI.property_type(::Type{ Error }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Error[name]))}

function check_required(o::Error)
    o.code === nothing && (return false)
    o.message === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Error }, name::Symbol, val)
end
