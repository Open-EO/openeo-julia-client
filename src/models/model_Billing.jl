# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Billing
Billing related data, e.g. the currency used or available plans to process jobs. This property MUST be specified if the back-end uses any billing related API functionalities, e.g. budgeting or estimates. The absence of this property doesn&#39;t mean the back-end is necessarily free to use for all. Providers may choose to bill users outside of the API, e.g. with a monthly fee that is not depending on individual API interactions.

    Billing(;
        currency=nothing,
        default_plan=nothing,
        plans=nothing,
    )

    - currency::String : The currency the back-end is billing in. The currency MUST be either a valid currency code as defined in ISO-4217 or a back-end specific unit that is used for billing such as credits, tiles or CPU hours. If set to &#x60;null&#x60;, budget and costs are not supported by the back-end and users can&#39;t be charged.
    - default_plan::String : Name of the plan the back-end uses for billing in case  1. the user has not subscribed to a specific plan    (see &#x60;default_plan&#x60; in &#x60;GET /me&#x60;) and 2. also did not provide a specific plan with the    processing request.  If a free plan is available at the back-end, it is  probably most useful to provide this as the back-end wide default plan and override it with paid plans through the user-specific default plan in &#x60;GET /me&#x60;. Otherwise, users that have not set up payment yet MAY receive an error for each processing requests where they did not provide a free plan specifically.
    - plans::Vector{BillingPlan} : Array of plans
"""
Base.@kwdef mutable struct Billing <: OpenAPI.APIModel
    currency::Union{Nothing, String} = nothing
    default_plan::Union{Nothing, String} = nothing
    plans::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{BillingPlan} }

    function Billing(currency, default_plan, plans, )
        OpenAPI.validate_property(Billing, Symbol("currency"), currency)
        OpenAPI.validate_property(Billing, Symbol("default_plan"), default_plan)
        OpenAPI.validate_property(Billing, Symbol("plans"), plans)
        return new(currency, default_plan, plans, )
    end
end # type Billing

const _property_types_Billing = Dict{Symbol,String}(Symbol("currency")=>"String", Symbol("default_plan")=>"String", Symbol("plans")=>"Vector{BillingPlan}", )
OpenAPI.property_type(::Type{ Billing }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Billing[name]))}

function check_required(o::Billing)
    o.currency === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Billing }, name::Symbol, val)
end
