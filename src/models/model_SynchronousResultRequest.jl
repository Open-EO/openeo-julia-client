# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Synchronous_Result_Request

    SynchronousResultRequest(;
        process=nothing,
        budget=nothing,
        plan=nothing,
        log_level=nothing,
    )

    - process::ProcessGraphWithMetadata
    - budget::Float64 : Maximum amount of costs the request is allowed to produce. The value MUST be specified in the currency of the back-end. No limits apply, if the value is &#x60;null&#x60; or the back-end has no currency set in &#x60;GET /&#x60;.
    - plan::String : The billing plan to process and charge the job or service with.  Billing plans MUST be accepted in a *case insensitive* manner. Back-ends MUST resolve the billing plan in the following way:  * If a non-&#x60;null&#x60; value is given: Persist the &#x60;plan&#x60; that has been provided in the request. * Otherwise:   1. Persist the &#x60;default_plan&#x60; exposed through &#x60;GET /me&#x60;, if available.   2. Persist the &#x60;default_plan&#x60; exposed through &#x60;GET /&#x60;, if available.   3. If a single plan is exposed by the back-end, persist it.   4. Otherwise, the back-end MUST throw a &#x60;BillingPlanMissing&#x60; error.  The resolved plan MUST be persisted permanently, regardless of any  changes to the exposed billing plans in &#x60;GET /&#x60; in the future.  Billing plans not on the list of available plans MUST be rejected with openEO error &#x60;BillingPlanInvalid&#x60;.
    - log_level::MinLogLevelDefault
"""
Base.@kwdef mutable struct SynchronousResultRequest <: OpenAPI.APIModel
    process = nothing # spec type: Union{ Nothing, ProcessGraphWithMetadata }
    budget::Union{Nothing, Float64} = nothing
    plan::Union{Nothing, String} = nothing
    log_level = nothing # spec type: Union{ Nothing, MinLogLevelDefault }

    function SynchronousResultRequest(process, budget, plan, log_level, )
        OpenAPI.validate_property(SynchronousResultRequest, Symbol("process"), process)
        OpenAPI.validate_property(SynchronousResultRequest, Symbol("budget"), budget)
        OpenAPI.validate_property(SynchronousResultRequest, Symbol("plan"), plan)
        OpenAPI.validate_property(SynchronousResultRequest, Symbol("log_level"), log_level)
        return new(process, budget, plan, log_level, )
    end
end # type SynchronousResultRequest

const _property_types_SynchronousResultRequest = Dict{Symbol,String}(Symbol("process")=>"ProcessGraphWithMetadata", Symbol("budget")=>"Float64", Symbol("plan")=>"String", Symbol("log_level")=>"MinLogLevelDefault", )
OpenAPI.property_type(::Type{ SynchronousResultRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SynchronousResultRequest[name]))}

function check_required(o::SynchronousResultRequest)
    o.process === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SynchronousResultRequest }, name::Symbol, val)
    if name === Symbol("budget")
        OpenAPI.validate_param(name, "SynchronousResultRequest", :minimum, val, 0, false)
    end
end
