# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""datacube_json_schema

    DatacubeJsonSchema(;
        subtype=nothing,
        dimensions=nothing,
    )

    - subtype::String
    - dimensions::Vector{OneOf} : Allows to specify requirements the data cube has to fulfill. Right now, it only allows to specify the dimension types and  adds for specific dimension types: * axes for &#x60;spatial&#x60; dimensions in raster datacubes * geometry types for &#x60;geometry&#x60; dimensions in vector datacubes
"""
Base.@kwdef mutable struct DatacubeJsonSchema <: OpenAPI.APIModel
    subtype::Union{Nothing, String} = nothing
    dimensions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OneOf} }

    function DatacubeJsonSchema(subtype, dimensions, )
        OpenAPI.validate_property(DatacubeJsonSchema, Symbol("subtype"), subtype)
        OpenAPI.validate_property(DatacubeJsonSchema, Symbol("dimensions"), dimensions)
        return new(subtype, dimensions, )
    end
end # type DatacubeJsonSchema

const _property_types_DatacubeJsonSchema = Dict{Symbol,String}(Symbol("subtype")=>"String", Symbol("dimensions")=>"Vector{OneOf}", )
OpenAPI.property_type(::Type{ DatacubeJsonSchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DatacubeJsonSchema[name]))}

function check_required(o::DatacubeJsonSchema)
    true
end

function OpenAPI.validate_property(::Type{ DatacubeJsonSchema }, name::Symbol, val)
    if name === Symbol("subtype")
        OpenAPI.validate_param(name, "DatacubeJsonSchema", :enum, val, ["datacube"])
    end
end
