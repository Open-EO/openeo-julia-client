# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""describe_job_200_response

    DescribeJob200Response(;
        id=nothing,
        title=nothing,
        description=nothing,
        process=nothing,
        status=created,
        progress=nothing,
        created=nothing,
        updated=nothing,
        plan=nothing,
        costs=nothing,
        budget=nothing,
        usage=nothing,
        log_level=nothing,
        links=nothing,
    )

    - id::String : Per-backend unique identifier of the batch job, generated by the back-end during creation. MUST match the specified pattern.
    - title::String : A short description to easily distinguish entities.
    - description::String : Detailed multi-line description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - process::ProcessGraphWithMetadata
    - status::String : The current status of a batch job.  The following status changes can occur: * &#x60;POST /jobs&#x60;: The status is initialized as &#x60;created&#x60;. * &#x60;POST /jobs/{job_id}/results&#x60;: The status is set to &#x60;queued&#x60;, if processing doesn&#39;t start instantly.     * Once the processing starts the status is set to &#x60;running&#x60;.     * Once the data is available to download the status is set to &#x60;finished&#x60;.     * Whenever an error occurs during processing, the status MUST be set to &#x60;error&#x60;. * &#x60;DELETE /jobs/{job_id}/results&#x60;: The status is set to &#x60;canceled&#x60; if the status was &#x60;running&#x60; beforehand and partial or preliminary results are available to be downloaded. Otherwise the status is set to &#x60;created&#x60;. 
    - progress::Float64 : Indicates the process of a running batch job in percent. Can also be set for a job which stopped due to an error or was canceled by the user. In this case, the value indicates the progress at which the job stopped. The Property may not be available for the status codes &#x60;created&#x60; and &#x60;queued&#x60;. Submitted and queued jobs only allow the value &#x60;0&#x60;, finished jobs only allow the value &#x60;100&#x60;.
    - created::ZonedDateTime : Date and time of creation, formatted as a [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) date-time.
    - updated::ZonedDateTime : Date and time of the last status change, formatted as a [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) date-time.
    - plan::String : The billing plan to process and charge the job or service with.  Billing plans MUST be handled in a *case insensitive* manner.  The plans can be retrieved from &#x60;GET /&#x60;, but the value returned here may not be in the list of plans any longer.
    - costs::Float64 : An amount of money or credits. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling &#x60;GET /&#x60;. If no currency is set, this field MUST be &#x60;null&#x60;.
    - budget::Float64 : Maximum amount of costs the request is allowed to produce. The value MUST be specified in the currency of the back-end. No limits apply, if the value is &#x60;null&#x60; or the back-end has no currency set in &#x60;GET /&#x60;.
    - usage::BatchJobUsage
    - log_level::MinLogLevelDefault
    - links::Vector{Link} : Links related to this batch job, e.g. a links to  invoices, log files or results.  It is RECOMMENDED to provide links with the following &#x60;rel&#x60; (relation) types:  1. &#x60;monitor&#x60;: If logs are available, a link to the [logs endpoint](#tag/Batch-Jobs/operation/debug-job). 2. &#x60;result&#x60;: If batch job results are available, a link to the [results endpoint](#tag/Batch-Jobs/operation/list-results).  The relation types &#x60;monitor&#x60; and &#x60;result&#x60; may occur for various batch job states:  1. &#x60;created&#x60;: When the batch job was executed before and has been reset to &#x60;created&#x60; after an    [update](#tag/Batch-Jobs/operation/update-job) there could still be results and logs available    until they get discarded by [queueing the batch job again](#tag/Batch-Jobs/operation/start-job). 2. &#x60;finished&#x60;: The full log and results are expected to be available. 3. &#x60;error&#x60; / &#x60;canceled&#x60;: Partial results and logs may be available.  For more relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
"""
Base.@kwdef mutable struct DescribeJob200Response <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    process = nothing # spec type: Union{ Nothing, ProcessGraphWithMetadata }
    status::Union{Nothing, String} = created
    progress::Union{Nothing, Float64} = nothing
    created::Union{Nothing, ZonedDateTime} = nothing
    updated::Union{Nothing, ZonedDateTime} = nothing
    plan::Union{Nothing, String} = nothing
    costs::Union{Nothing, Float64} = nothing
    budget::Union{Nothing, Float64} = nothing
    usage = nothing # spec type: Union{ Nothing, BatchJobUsage }
    log_level = nothing # spec type: Union{ Nothing, MinLogLevelDefault }
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }

    function DescribeJob200Response(id, title, description, process, status, progress, created, updated, plan, costs, budget, usage, log_level, links, )
        OpenAPI.validate_property(DescribeJob200Response, Symbol("id"), id)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("title"), title)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("description"), description)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("process"), process)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("status"), status)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("progress"), progress)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("created"), created)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("updated"), updated)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("plan"), plan)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("costs"), costs)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("budget"), budget)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("usage"), usage)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("log_level"), log_level)
        OpenAPI.validate_property(DescribeJob200Response, Symbol("links"), links)
        return new(id, title, description, process, status, progress, created, updated, plan, costs, budget, usage, log_level, links, )
    end
end # type DescribeJob200Response

const _property_types_DescribeJob200Response = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("process")=>"ProcessGraphWithMetadata", Symbol("status")=>"String", Symbol("progress")=>"Float64", Symbol("created")=>"ZonedDateTime", Symbol("updated")=>"ZonedDateTime", Symbol("plan")=>"String", Symbol("costs")=>"Float64", Symbol("budget")=>"Float64", Symbol("usage")=>"BatchJobUsage", Symbol("log_level")=>"MinLogLevelDefault", Symbol("links")=>"Vector{Link}", )
OpenAPI.property_type(::Type{ DescribeJob200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DescribeJob200Response[name]))}

function check_required(o::DescribeJob200Response)
    o.id === nothing && (return false)
    o.process === nothing && (return false)
    o.status === nothing && (return false)
    o.created === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DescribeJob200Response }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "DescribeJob200Response", :pattern, val, r"^[\w\-\.~]+$")
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "DescribeJob200Response", :format, val, "commonmark")
    end
    if name === Symbol("status")
        OpenAPI.validate_param(name, "DescribeJob200Response", :enum, val, ["created", "queued", "running", "canceled", "finished", "error"])
    end
    if name === Symbol("progress")
        OpenAPI.validate_param(name, "DescribeJob200Response", :maximum, val, 100, false)
        OpenAPI.validate_param(name, "DescribeJob200Response", :minimum, val, 0, false)
    end
    if name === Symbol("created")
        OpenAPI.validate_param(name, "DescribeJob200Response", :format, val, "date-time")
    end
    if name === Symbol("updated")
        OpenAPI.validate_param(name, "DescribeJob200Response", :format, val, "date-time")
    end
    if name === Symbol("costs")
        OpenAPI.validate_param(name, "DescribeJob200Response", :minimum, val, 0, false)
    end
    if name === Symbol("budget")
        OpenAPI.validate_param(name, "DescribeJob200Response", :minimum, val, 0, false)
    end
end
