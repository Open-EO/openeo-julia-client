# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GeoJsonPoint

    GeoJsonPoint(;
        type=nothing,
        coordinates=nothing,
    )

    - type::String
    - coordinates::Vector{Float64} : Point in 3D space
"""
Base.@kwdef mutable struct GeoJsonPoint <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    coordinates::Union{Nothing, Vector{Float64}} = nothing

    function GeoJsonPoint(type, coordinates, )
        OpenAPI.validate_property(GeoJsonPoint, Symbol("type"), type)
        OpenAPI.validate_property(GeoJsonPoint, Symbol("coordinates"), coordinates)
        return new(type, coordinates, )
    end
end # type GeoJsonPoint

const _property_types_GeoJsonPoint = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("coordinates")=>"Vector{Float64}", )
OpenAPI.property_type(::Type{ GeoJsonPoint }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeoJsonPoint[name]))}

function check_required(o::GeoJsonPoint)
    o.type === nothing && (return false)
    o.coordinates === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GeoJsonPoint }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "GeoJsonPoint", :enum, val, ["Point"])
    end
    if name === Symbol("coordinates")
        OpenAPI.validate_param(name, "GeoJsonPoint", :maxItems, val, 3)
        OpenAPI.validate_param(name, "GeoJsonPoint", :minItems, val, 2)
    end
end
