# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""file_format
Describes a specific file format.

    FileFormat(;
        title=nothing,
        description=nothing,
        gis_data_types=nothing,
        deprecated=false,
        experimental=false,
        parameters=nothing,
        links=nothing,
    )

    - title::String : A human-readable short title to be displayed to users **in addition** to the names specified in the keys. This property is only for better user experience so that users can understand the names better. Example titles could be &#x60;GeoTiff&#x60; for the key &#x60;GTiff&#x60; (for file formats) or &#x60;OGC Web Map Service&#x60; for the key &#x60;WMS&#x60; (for service types). The title MUST NOT be used in communication (e.g. in process graphs), although clients MAY translate the titles into the corresponding names.
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - gis_data_types::Vector{String} : Specifies the supported GIS spatial data types for this format. It is RECOMMENDED to specify at least one of the data types, which will likely become a requirement in a future API version.
    - deprecated::Bool : Declares that the specified entity is deprecated with the potential to be removed in any of the next versions. It should be transitioned out of usage as soon as possible and users should refrain from using it in new implementations.
    - experimental::Bool : Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback.
    - parameters::Dict{String, ResourceParameter} : Specifies the supported parameters for this file format.
    - links::Vector{Link} : Links related to this file format, e.g. external documentation.  For relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
"""
Base.@kwdef mutable struct FileFormat <: OpenAPI.APIModel
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    gis_data_types::Union{Nothing, Vector{String}} = nothing
    deprecated::Union{Nothing, Bool} = false
    experimental::Union{Nothing, Bool} = false
    parameters::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ResourceParameter} }
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }

    function FileFormat(title, description, gis_data_types, deprecated, experimental, parameters, links, )
        OpenAPI.validate_property(FileFormat, Symbol("title"), title)
        OpenAPI.validate_property(FileFormat, Symbol("description"), description)
        OpenAPI.validate_property(FileFormat, Symbol("gis_data_types"), gis_data_types)
        OpenAPI.validate_property(FileFormat, Symbol("deprecated"), deprecated)
        OpenAPI.validate_property(FileFormat, Symbol("experimental"), experimental)
        OpenAPI.validate_property(FileFormat, Symbol("parameters"), parameters)
        OpenAPI.validate_property(FileFormat, Symbol("links"), links)
        return new(title, description, gis_data_types, deprecated, experimental, parameters, links, )
    end
end # type FileFormat

const _property_types_FileFormat = Dict{Symbol,String}(Symbol("title")=>"String", Symbol("description")=>"String", Symbol("gis_data_types")=>"Vector{String}", Symbol("deprecated")=>"Bool", Symbol("experimental")=>"Bool", Symbol("parameters")=>"Dict{String, ResourceParameter}", Symbol("links")=>"Vector{Link}", )
OpenAPI.property_type(::Type{ FileFormat }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FileFormat[name]))}

function check_required(o::FileFormat)
    o.gis_data_types === nothing && (return false)
    o.parameters === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FileFormat }, name::Symbol, val)
    if name === Symbol("description")
        OpenAPI.validate_param(name, "FileFormat", :format, val, "commonmark")
    end
    if name === Symbol("gis_data_types")
        OpenAPI.validate_param(name, "FileFormat", :enum, val, [])
    end
end
