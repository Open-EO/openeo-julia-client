# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""base_parameter

    BaseParameter(;
        name=nothing,
        description=nothing,
        optional=false,
        deprecated=false,
        experimental=false,
        default=nothing,
    )

    - name::String : A unique name for the parameter.   It is RECOMMENDED to use [snake case](https://en.wikipedia.org/wiki/Snake_case) (e.g. &#x60;window_size&#x60; or &#x60;scale_factor&#x60;).
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: &#x60;&#x60;&#x60; &#x60;&#x60;process_id()&#x60;&#x60; &#x60;&#x60;&#x60;
    - optional::Bool : Determines whether this parameter is optional to be specified even when no default is specified. Clients SHOULD automatically set this parameter to &#x60;true&#x60;, if a default value is specified. Back-ends SHOULD NOT fail, if a default value is specified and this flag is missing.
    - deprecated::Bool : Declares that the specified entity is deprecated with the potential to be removed in any of the next versions. It should be transitioned out of usage as soon as possible and users should refrain from using it in new implementations.
    - experimental::Bool : Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback.
    - default::Any : The default value for this parameter. Required parameters SHOULD NOT specify a default value. Optional parameters SHOULD always specify a default value.
"""
Base.@kwdef mutable struct BaseParameter <: OpenAPI.APIModel
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    optional::Union{Nothing, Bool} = false
    deprecated::Union{Nothing, Bool} = false
    experimental::Union{Nothing, Bool} = false
    default::Union{Nothing, Any} = nothing

    function BaseParameter(name, description, optional, deprecated, experimental, default, )
        OpenAPI.validate_property(BaseParameter, Symbol("name"), name)
        OpenAPI.validate_property(BaseParameter, Symbol("description"), description)
        OpenAPI.validate_property(BaseParameter, Symbol("optional"), optional)
        OpenAPI.validate_property(BaseParameter, Symbol("deprecated"), deprecated)
        OpenAPI.validate_property(BaseParameter, Symbol("experimental"), experimental)
        OpenAPI.validate_property(BaseParameter, Symbol("default"), default)
        return new(name, description, optional, deprecated, experimental, default, )
    end
end # type BaseParameter

const _property_types_BaseParameter = Dict{Symbol,String}(Symbol("name")=>"String", Symbol("description")=>"String", Symbol("optional")=>"Bool", Symbol("deprecated")=>"Bool", Symbol("experimental")=>"Bool", Symbol("default")=>"Any", )
OpenAPI.property_type(::Type{ BaseParameter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BaseParameter[name]))}

function check_required(o::BaseParameter)
    o.name === nothing && (return false)
    o.description === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BaseParameter }, name::Symbol, val)
    if name === Symbol("name")
        OpenAPI.validate_param(name, "BaseParameter", :pattern, val, r"^\w+$")
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "BaseParameter", :format, val, "commonmark")
    end
end
