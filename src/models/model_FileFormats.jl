# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""File_Formats

    FileFormats(;
        input=nothing,
        output=nothing,
    )

    - input::Dict{String, FileFormat} : Map of supported input file formats, i.e. file formats a back-end can **read** from. The property keys are the file format names that are used by clients and users, for example in process graphs.
    - output::Dict{String, FileFormat} : Map of supported output file formats, i.e. file formats a back-end can **write** to. The property keys are the file format names that are used by clients and users, for example in process graphs.
"""
Base.@kwdef mutable struct FileFormats <: OpenAPI.APIModel
    input::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, FileFormat} }
    output::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, FileFormat} }

    function FileFormats(input, output, )
        OpenAPI.validate_property(FileFormats, Symbol("input"), input)
        OpenAPI.validate_property(FileFormats, Symbol("output"), output)
        return new(input, output, )
    end
end # type FileFormats

const _property_types_FileFormats = Dict{Symbol,String}(Symbol("input")=>"Dict{String, FileFormat}", Symbol("output")=>"Dict{String, FileFormat}", )
OpenAPI.property_type(::Type{ FileFormats }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FileFormats[name]))}

function check_required(o::FileFormats)
    o.input === nothing && (return false)
    o.output === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FileFormats }, name::Symbol, val)
end
