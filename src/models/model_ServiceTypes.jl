# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Service_Types

    ServiceTypes(;
        title=nothing,
        description=nothing,
        deprecated=false,
        experimental=false,
        configuration=nothing,
        process_parameters=nothing,
        links=nothing,
    )

    - title::String : A human-readable short title to be displayed to users **in addition** to the names specified in the keys. This property is only for better user experience so that users can understand the names better. Example titles could be &#x60;GeoTiff&#x60; for the key &#x60;GTiff&#x60; (for file formats) or &#x60;OGC Web Map Service&#x60; for the key &#x60;WMS&#x60; (for service types). The title MUST NOT be used in communication (e.g. in process graphs), although clients MAY translate the titles into the corresponding names.
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - deprecated::Bool : Declares that the specified entity is deprecated with the potential to be removed in any of the next versions. It should be transitioned out of usage as soon as possible and users should refrain from using it in new implementations.
    - experimental::Bool : Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback.
    - configuration::Dict{String, ResourceParameter} : Map of supported configuration settings made available to the creator of the service.
    - process_parameters::Vector{ProcessParameter} : List of parameters made available to user-defined processes.
    - links::Vector{Link} : Links related to this service type, e.g. more information about the configuration settings and process parameters.  For relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
"""
Base.@kwdef mutable struct ServiceTypes <: OpenAPI.APIModel
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    deprecated::Union{Nothing, Bool} = false
    experimental::Union{Nothing, Bool} = false
    configuration::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ResourceParameter} }
    process_parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProcessParameter} }
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }

    function ServiceTypes(title, description, deprecated, experimental, configuration, process_parameters, links, )
        OpenAPI.validate_property(ServiceTypes, Symbol("title"), title)
        OpenAPI.validate_property(ServiceTypes, Symbol("description"), description)
        OpenAPI.validate_property(ServiceTypes, Symbol("deprecated"), deprecated)
        OpenAPI.validate_property(ServiceTypes, Symbol("experimental"), experimental)
        OpenAPI.validate_property(ServiceTypes, Symbol("configuration"), configuration)
        OpenAPI.validate_property(ServiceTypes, Symbol("process_parameters"), process_parameters)
        OpenAPI.validate_property(ServiceTypes, Symbol("links"), links)
        return new(title, description, deprecated, experimental, configuration, process_parameters, links, )
    end
end # type ServiceTypes

const _property_types_ServiceTypes = Dict{Symbol,String}(Symbol("title")=>"String", Symbol("description")=>"String", Symbol("deprecated")=>"Bool", Symbol("experimental")=>"Bool", Symbol("configuration")=>"Dict{String, ResourceParameter}", Symbol("process_parameters")=>"Vector{ProcessParameter}", Symbol("links")=>"Vector{Link}", )
OpenAPI.property_type(::Type{ ServiceTypes }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ServiceTypes[name]))}

function check_required(o::ServiceTypes)
    o.configuration === nothing && (return false)
    o.process_parameters === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ServiceTypes }, name::Symbol, val)
    if name === Symbol("description")
        OpenAPI.validate_param(name, "ServiceTypes", :format, val, "commonmark")
    end
end
