# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""user_defined_process_meta
A user-defined process, may only contain metadata and no process graph.

    UserDefinedProcessMeta(;
        summary=nothing,
        description=nothing,
        parameters=nothing,
        returns=nothing,
        id=nothing,
        categories=nothing,
        deprecated=false,
        experimental=false,
        exceptions=nothing,
        examples=nothing,
        links=nothing,
        process_graph=nothing,
    )

    - summary::String
    - description::String
    - parameters::Vector
    - returns::Any
    - id::String : The identifier for the process. It MUST be unique across its namespace (e.g. predefined processes or user-defined processes).  Clients SHOULD warn the user if a user-defined process is added with the  same identifier as one of the predefined process.
    - categories::Vector{String} : A list of categories.
    - deprecated::Bool : Declares that the specified entity is deprecated with the potential to be removed in any of the next versions. It should be transitioned out of usage as soon as possible and users should refrain from using it in new implementations.
    - experimental::Bool : Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback.
    - exceptions::Dict{String, ProcessExceptions} : Declares exceptions (errors) that might occur during execution of this process. This list is just for informative purposes and may be incomplete. This list MUST only contain exceptions that stop the execution of a process and MUST NOT contain warnings, notices or debugging messages. It is meant to primarily contain errors that have been caused by the user. It is RECOMMENDED that exceptions are referred to and explained in process or parameter descriptions.  The keys define the error code and MUST match the following pattern: &#x60;^\\w+$&#x60;  This schema follows the schema of the general openEO error list (see errors.json).
    - examples::Vector{ProcessExample} : Examples, may be used for unit tests.
    - links::Vector{Link} : Links related to this process, e.g. additional external documentation.  It is RECOMMENDED to provide links with the following &#x60;rel&#x60; (relation) types:  1. &#x60;latest-version&#x60;: If a process has been marked as deprecated, a link SHOULD point to the preferred version of the process. The relation types &#x60;predecessor-version&#x60; (link to older version) and &#x60;successor-version&#x60; (link to newer version) can also be used to show the relation between versions.  2. &#x60;example&#x60;: Links to examples of other processes that use this process.  3. &#x60;cite-as&#x60;: For all DOIs associated with the process, the respective DOI links SHOULD be added.  For additional relation types see also the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
    - process_graph::Dict{String, ProcessGraph} : A process graph defines a graph-like structure as a connected set of executable processes. Each key is a unique identifier (node ID) that is used to refer to the process in the graph.
"""
Base.@kwdef mutable struct UserDefinedProcessMeta <: OpenAPI.APIModel
    summary::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    parameters::Union{Nothing, Vector} = nothing
    returns::Union{Nothing, Any} = nothing
    id::Union{Nothing, String} = nothing
    categories::Union{Nothing, Vector{String}} = nothing
    deprecated::Union{Nothing, Bool} = false
    experimental::Union{Nothing, Bool} = false
    exceptions::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ProcessExceptions} }
    examples::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ProcessExample} }
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }
    process_graph::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ProcessGraph} }

    function UserDefinedProcessMeta(summary, description, parameters, returns, id, categories, deprecated, experimental, exceptions, examples, links, process_graph, )
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("summary"), summary)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("description"), description)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("parameters"), parameters)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("returns"), returns)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("id"), id)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("categories"), categories)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("deprecated"), deprecated)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("experimental"), experimental)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("exceptions"), exceptions)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("examples"), examples)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("links"), links)
        OpenAPI.validate_property(UserDefinedProcessMeta, Symbol("process_graph"), process_graph)
        return new(summary, description, parameters, returns, id, categories, deprecated, experimental, exceptions, examples, links, process_graph, )
    end
end # type UserDefinedProcessMeta

const _property_types_UserDefinedProcessMeta = Dict{Symbol,String}(Symbol("summary")=>"String", Symbol("description")=>"String", Symbol("parameters")=>"Vector", Symbol("returns")=>"Any", Symbol("id")=>"String", Symbol("categories")=>"Vector{String}", Symbol("deprecated")=>"Bool", Symbol("experimental")=>"Bool", Symbol("exceptions")=>"Dict{String, ProcessExceptions}", Symbol("examples")=>"Vector{ProcessExample}", Symbol("links")=>"Vector{Link}", Symbol("process_graph")=>"Dict{String, ProcessGraph}", )
OpenAPI.property_type(::Type{ UserDefinedProcessMeta }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UserDefinedProcessMeta[name]))}

function check_required(o::UserDefinedProcessMeta)
    o.id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UserDefinedProcessMeta }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "UserDefinedProcessMeta", :pattern, val, r"^\w+$")
    end
end
