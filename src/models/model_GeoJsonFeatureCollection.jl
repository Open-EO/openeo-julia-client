# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GeoJsonFeatureCollection

    GeoJsonFeatureCollection(;
        type=nothing,
        features=nothing,
    )

    - type::String
    - features::Vector{GeoJsonFeature}
"""
Base.@kwdef mutable struct GeoJsonFeatureCollection <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    features::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{GeoJsonFeature} }

    function GeoJsonFeatureCollection(type, features, )
        OpenAPI.validate_property(GeoJsonFeatureCollection, Symbol("type"), type)
        OpenAPI.validate_property(GeoJsonFeatureCollection, Symbol("features"), features)
        return new(type, features, )
    end
end # type GeoJsonFeatureCollection

const _property_types_GeoJsonFeatureCollection = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("features")=>"Vector{GeoJsonFeature}", )
OpenAPI.property_type(::Type{ GeoJsonFeatureCollection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeoJsonFeatureCollection[name]))}

function check_required(o::GeoJsonFeatureCollection)
    o.type === nothing && (return false)
    o.features === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GeoJsonFeatureCollection }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "GeoJsonFeatureCollection", :enum, val, ["FeatureCollection"])
    end
end
