# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Programming_language_version

    ProgrammingLanguageVersion(;
        deprecated=false,
        experimental=false,
        libraries=nothing,
    )

    - deprecated::Bool : Declares that the specified entity is deprecated with the potential to be removed in any of the next versions. It should be transitioned out of usage as soon as possible and users should refrain from using it in new implementations.
    - experimental::Bool : Declares that the specified entity is experimental, which means that it is likely to change or may produce unpredictable behaviour. Users should refrain from using it in production, but still feel encouraged to try it out and give feedback.
    - libraries::Dict{String, ProgrammingLanguageLibrary} : Map of installed libraries, modules, packages or extensions for the programming language. The names of them are used as the property keys.
"""
Base.@kwdef mutable struct ProgrammingLanguageVersion <: OpenAPI.APIModel
    deprecated::Union{Nothing, Bool} = false
    experimental::Union{Nothing, Bool} = false
    libraries::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ProgrammingLanguageLibrary} }

    function ProgrammingLanguageVersion(deprecated, experimental, libraries, )
        OpenAPI.validate_property(ProgrammingLanguageVersion, Symbol("deprecated"), deprecated)
        OpenAPI.validate_property(ProgrammingLanguageVersion, Symbol("experimental"), experimental)
        OpenAPI.validate_property(ProgrammingLanguageVersion, Symbol("libraries"), libraries)
        return new(deprecated, experimental, libraries, )
    end
end # type ProgrammingLanguageVersion

const _property_types_ProgrammingLanguageVersion = Dict{Symbol,String}(Symbol("deprecated")=>"Bool", Symbol("experimental")=>"Bool", Symbol("libraries")=>"Dict{String, ProgrammingLanguageLibrary}", )
OpenAPI.property_type(::Type{ ProgrammingLanguageVersion }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProgrammingLanguageVersion[name]))}

function check_required(o::ProgrammingLanguageVersion)
    o.libraries === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProgrammingLanguageVersion }, name::Symbol, val)
end
