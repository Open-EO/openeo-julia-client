# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""usage_memory
Specifies the memory usage, usually in a unit such as &#x60;mb-seconds&#x60; or &#x60;gb-hours&#x60;.

    UsageMemory(;
        value=nothing,
        unit=nothing,
    )

    - value::Float64
    - unit::String
"""
Base.@kwdef mutable struct UsageMemory <: OpenAPI.APIModel
    value::Union{Nothing, Float64} = nothing
    unit::Union{Nothing, String} = nothing

    function UsageMemory(value, unit, )
        OpenAPI.validate_property(UsageMemory, Symbol("value"), value)
        OpenAPI.validate_property(UsageMemory, Symbol("unit"), unit)
        return new(value, unit, )
    end
end # type UsageMemory

const _property_types_UsageMemory = Dict{Symbol,String}(Symbol("value")=>"Float64", Symbol("unit")=>"String", )
OpenAPI.property_type(::Type{ UsageMemory }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UsageMemory[name]))}

function check_required(o::UsageMemory)
    o.value === nothing && (return false)
    o.unit === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ UsageMemory }, name::Symbol, val)
    if name === Symbol("value")
        OpenAPI.validate_param(name, "UsageMemory", :minimum, val, 0, false)
    end
end
