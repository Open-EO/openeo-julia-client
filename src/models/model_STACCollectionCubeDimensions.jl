# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""STAC_Collection_Cube_Dimensions

    STACCollectionCubeDimensions(;
        type=nothing,
        description=nothing,
    )

    - type::String : Type of the dimension.
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
"""
Base.@kwdef mutable struct STACCollectionCubeDimensions <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing

    function STACCollectionCubeDimensions(type, description, )
        OpenAPI.validate_property(STACCollectionCubeDimensions, Symbol("type"), type)
        OpenAPI.validate_property(STACCollectionCubeDimensions, Symbol("description"), description)
        return new(type, description, )
    end
end # type STACCollectionCubeDimensions

const _property_types_STACCollectionCubeDimensions = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("description")=>"String", )
OpenAPI.property_type(::Type{ STACCollectionCubeDimensions }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_STACCollectionCubeDimensions[name]))}

function check_required(o::STACCollectionCubeDimensions)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ STACCollectionCubeDimensions }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "STACCollectionCubeDimensions", :enum, val, ["spatial", "temporal", "bands", "geometry", "other"])
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "STACCollectionCubeDimensions", :format, val, "commonmark")
    end
end
