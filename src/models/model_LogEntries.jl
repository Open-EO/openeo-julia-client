# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Log_Entries

    LogEntries(;
        level=debug,
        logs=nothing,
        links=nothing,
    )

    - level::String : The minimum severity level for log entries that the back-end returns. This property MUST reflect the effective lowest &#x60;level&#x60; that may appear in the document, which is (if implemented) the highest level of: 1. the &#x60;log_level&#x60; specified by the user for the processing request. 2. the &#x60;level&#x60; specified by the user for the log request.  The order of the levels is as follows (from low to high severity): &#x60;debug&#x60;, &#x60;info&#x60;, &#x60;warning&#x60;, &#x60;error&#x60;. That means if &#x60;warning&#x60; is set, the logs will only contain entries with the level &#x60;warning&#x60; and &#x60;error&#x60;.
    - logs::Vector{LogEntry} : A chronological list of logs.
    - links::Vector{Link} : Links related to this list of resources, for example links for pagination or alternative formats such as a human-readable HTML version. The links array MUST NOT be paginated.  If pagination is implemented, the following &#x60;rel&#x60; (relation) types apply:  1. &#x60;next&#x60; (REQUIRED): A link to the next page, except on the last page.  2. &#x60;prev&#x60; (OPTIONAL): A link to the previous page, except on the first page.  3. &#x60;first&#x60; (OPTIONAL): A link to the first page, except on the first page.  4. &#x60;last&#x60; (OPTIONAL): A link to the last page, except on the last page.  For additional relation types see also the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
"""
Base.@kwdef mutable struct LogEntries <: OpenAPI.APIModel
    level::Union{Nothing, String} = debug
    logs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{LogEntry} }
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }

    function LogEntries(level, logs, links, )
        OpenAPI.validate_property(LogEntries, Symbol("level"), level)
        OpenAPI.validate_property(LogEntries, Symbol("logs"), logs)
        OpenAPI.validate_property(LogEntries, Symbol("links"), links)
        return new(level, logs, links, )
    end
end # type LogEntries

const _property_types_LogEntries = Dict{Symbol,String}(Symbol("level")=>"String", Symbol("logs")=>"Vector{LogEntry}", Symbol("links")=>"Vector{Link}", )
OpenAPI.property_type(::Type{ LogEntries }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_LogEntries[name]))}

function check_required(o::LogEntries)
    o.logs === nothing && (return false)
    o.links === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ LogEntries }, name::Symbol, val)
    if name === Symbol("level")
        OpenAPI.validate_param(name, "LogEntries", :enum, val, ["error", "warning", "info", "debug"])
    end
end
