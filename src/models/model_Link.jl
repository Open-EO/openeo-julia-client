# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""link
A link to another resource on the web. Bases on [RFC 5899](https://www.rfc-editor.org/rfc/rfc5988.html).

    Link(;
        rel=nothing,
        href=nothing,
        type=nothing,
        title=nothing,
    )

    - rel::String : Relationship between the current document and the linked document. SHOULD be a [registered link relation type](https://www.iana.org/assignments/link-relations/link-relations.xml) whenever feasible.
    - href::String : The value MUST be a valid URL.
    - type::String : The value MUST be a string that hints at the format used to represent data at the provided URI, preferably a media (MIME) type.
    - title::String : Used as a human-readable label for a link.
"""
Base.@kwdef mutable struct Link <: OpenAPI.APIModel
    rel::Union{Nothing, String} = nothing
    href::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing

    function Link(rel, href, type, title, )
        OpenAPI.validate_property(Link, Symbol("rel"), rel)
        OpenAPI.validate_property(Link, Symbol("href"), href)
        OpenAPI.validate_property(Link, Symbol("type"), type)
        OpenAPI.validate_property(Link, Symbol("title"), title)
        return new(rel, href, type, title, )
    end
end # type Link

const _property_types_Link = Dict{Symbol,String}(Symbol("rel")=>"String", Symbol("href")=>"String", Symbol("type")=>"String", Symbol("title")=>"String", )
OpenAPI.property_type(::Type{ Link }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Link[name]))}

function check_required(o::Link)
    o.rel === nothing && (return false)
    o.href === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Link }, name::Symbol, val)
    if name === Symbol("href")
        OpenAPI.validate_param(name, "Link", :format, val, "uri")
    end
end
