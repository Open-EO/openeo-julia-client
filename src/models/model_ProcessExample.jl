# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Process_Example

    ProcessExample(;
        title=nothing,
        description=nothing,
        arguments=nothing,
        returns=nothing,
    )

    - title::String : A title for the example.
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: &#x60;&#x60;&#x60; &#x60;&#x60;process_id()&#x60;&#x60; &#x60;&#x60;&#x60;
    - arguments::Dict{String, ProcessArgumentValue}
    - returns::Any : The return value which can by of any data type.
"""
Base.@kwdef mutable struct ProcessExample <: OpenAPI.APIModel
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    arguments::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, ProcessArgumentValue} }
    returns::Union{Nothing, Any} = nothing

    function ProcessExample(title, description, arguments, returns, )
        OpenAPI.validate_property(ProcessExample, Symbol("title"), title)
        OpenAPI.validate_property(ProcessExample, Symbol("description"), description)
        OpenAPI.validate_property(ProcessExample, Symbol("arguments"), arguments)
        OpenAPI.validate_property(ProcessExample, Symbol("returns"), returns)
        return new(title, description, arguments, returns, )
    end
end # type ProcessExample

const _property_types_ProcessExample = Dict{Symbol,String}(Symbol("title")=>"String", Symbol("description")=>"String", Symbol("arguments")=>"Dict{String, ProcessArgumentValue}", Symbol("returns")=>"Any", )
OpenAPI.property_type(::Type{ ProcessExample }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProcessExample[name]))}

function check_required(o::ProcessExample)
    o.arguments === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProcessExample }, name::Symbol, val)
    if name === Symbol("description")
        OpenAPI.validate_param(name, "ProcessExample", :format, val, "commonmark")
    end
end
