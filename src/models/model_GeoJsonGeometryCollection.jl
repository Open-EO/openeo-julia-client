# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GeoJsonGeometryCollection

    GeoJsonGeometryCollection(;
        type=nothing,
        geometries=nothing,
    )

    - type::GeometryType
    - geometries::Vector{GeoJsonGeometry}
"""
Base.@kwdef mutable struct GeoJsonGeometryCollection <: OpenAPI.APIModel
    type = nothing # spec type: Union{ Nothing, GeometryType }
    geometries::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{GeoJsonGeometry} }

    function GeoJsonGeometryCollection(type, geometries, )
        OpenAPI.validate_property(GeoJsonGeometryCollection, Symbol("type"), type)
        OpenAPI.validate_property(GeoJsonGeometryCollection, Symbol("geometries"), geometries)
        return new(type, geometries, )
    end
end # type GeoJsonGeometryCollection

const _property_types_GeoJsonGeometryCollection = Dict{Symbol,String}(Symbol("type")=>"GeometryType", Symbol("geometries")=>"Vector{GeoJsonGeometry}", )
OpenAPI.property_type(::Type{ GeoJsonGeometryCollection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeoJsonGeometryCollection[name]))}

function check_required(o::GeoJsonGeometryCollection)
    o.type === nothing && (return false)
    o.geometries === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GeoJsonGeometryCollection }, name::Symbol, val)
end
