# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""GeoJsonFeature

    GeoJsonFeature(;
        type=nothing,
        geometry=nothing,
        properties=nothing,
    )

    - type::String
    - geometry::GeoJsonGeometry
    - properties::Any
"""
Base.@kwdef mutable struct GeoJsonFeature <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    geometry = nothing # spec type: Union{ Nothing, GeoJsonGeometry }
    properties::Union{Nothing, Any} = nothing

    function GeoJsonFeature(type, geometry, properties, )
        OpenAPI.validate_property(GeoJsonFeature, Symbol("type"), type)
        OpenAPI.validate_property(GeoJsonFeature, Symbol("geometry"), geometry)
        OpenAPI.validate_property(GeoJsonFeature, Symbol("properties"), properties)
        return new(type, geometry, properties, )
    end
end # type GeoJsonFeature

const _property_types_GeoJsonFeature = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("geometry")=>"GeoJsonGeometry", Symbol("properties")=>"Any", )
OpenAPI.property_type(::Type{ GeoJsonFeature }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_GeoJsonFeature[name]))}

function check_required(o::GeoJsonFeature)
    o.type === nothing && (return false)
    o.geometry === nothing && (return false)
    o.properties === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ GeoJsonFeature }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "GeoJsonFeature", :enum, val, ["Feature"])
    end
end
