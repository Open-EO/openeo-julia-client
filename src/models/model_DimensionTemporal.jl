# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""dimension_temporal

    DimensionTemporal(;
        type=nothing,
        description=nothing,
        values=nothing,
        extent=nothing,
        step=nothing,
    )

    - type::String : Type of the dimension.
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - values::Vector{String} : If the dimension consists of set of specific values they can be listed here. The dates and/or times MUST be strings compliant to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601).
    - extent::Vector{String} : Extent (lower and upper bounds) of the dimension as two-dimensional array. The dates and/or times MUST be strings compliant to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601). &#x60;null&#x60; is allowed for open date ranges.
    - step::String : The space between the temporal instances as [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations), e.g. &#x60;P1D&#x60;. Use &#x60;null&#x60; for irregularly spaced steps.
"""
Base.@kwdef mutable struct DimensionTemporal <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    values::Union{Nothing, Vector{String}} = nothing
    extent::Union{Nothing, Vector{String}} = nothing
    step::Union{Nothing, String} = nothing

    function DimensionTemporal(type, description, values, extent, step, )
        OpenAPI.validate_property(DimensionTemporal, Symbol("type"), type)
        OpenAPI.validate_property(DimensionTemporal, Symbol("description"), description)
        OpenAPI.validate_property(DimensionTemporal, Symbol("values"), values)
        OpenAPI.validate_property(DimensionTemporal, Symbol("extent"), extent)
        OpenAPI.validate_property(DimensionTemporal, Symbol("step"), step)
        return new(type, description, values, extent, step, )
    end
end # type DimensionTemporal

const _property_types_DimensionTemporal = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("description")=>"String", Symbol("values")=>"Vector{String}", Symbol("extent")=>"Vector{String}", Symbol("step")=>"String", )
OpenAPI.property_type(::Type{ DimensionTemporal }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DimensionTemporal[name]))}

function check_required(o::DimensionTemporal)
    o.type === nothing && (return false)
    o.extent === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DimensionTemporal }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "DimensionTemporal", :enum, val, ["spatial", "temporal", "bands", "geometry", "other"])
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "DimensionTemporal", :format, val, "commonmark")
    end
    if name === Symbol("values")
        OpenAPI.validate_param(name, "DimensionTemporal", :minItems, val, 1)
    end
    if name === Symbol("extent")
        OpenAPI.validate_param(name, "DimensionTemporal", :maxItems, val, 2)
        OpenAPI.validate_param(name, "DimensionTemporal", :minItems, val, 2)
    end
end
