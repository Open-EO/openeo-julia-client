# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""process_graph_json_schema

    ProcessGraphJsonSchema(;
        subtype=nothing,
        parameters=nothing,
        returns=nothing,
    )

    - subtype::String
    - parameters::Vector{Parameter} : A list of parameters passed to the child process graph.  The order in the array corresponds to the parameter order to be used in clients that don&#39;t support named parameters.
    - returns::ProcessGraphReturnValue
"""
Base.@kwdef mutable struct ProcessGraphJsonSchema <: OpenAPI.APIModel
    subtype::Union{Nothing, String} = nothing
    parameters::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Parameter} }
    returns = nothing # spec type: Union{ Nothing, ProcessGraphReturnValue }

    function ProcessGraphJsonSchema(subtype, parameters, returns, )
        OpenAPI.validate_property(ProcessGraphJsonSchema, Symbol("subtype"), subtype)
        OpenAPI.validate_property(ProcessGraphJsonSchema, Symbol("parameters"), parameters)
        OpenAPI.validate_property(ProcessGraphJsonSchema, Symbol("returns"), returns)
        return new(subtype, parameters, returns, )
    end
end # type ProcessGraphJsonSchema

const _property_types_ProcessGraphJsonSchema = Dict{Symbol,String}(Symbol("subtype")=>"String", Symbol("parameters")=>"Vector{Parameter}", Symbol("returns")=>"ProcessGraphReturnValue", )
OpenAPI.property_type(::Type{ ProcessGraphJsonSchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProcessGraphJsonSchema[name]))}

function check_required(o::ProcessGraphJsonSchema)
    true
end

function OpenAPI.validate_property(::Type{ ProcessGraphJsonSchema }, name::Symbol, val)
    if name === Symbol("subtype")
        OpenAPI.validate_param(name, "ProcessGraphJsonSchema", :enum, val, ["process-graph"])
    end
end
