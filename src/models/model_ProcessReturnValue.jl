# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""process_return_value
Description of the data that is returned by this process.

    ProcessReturnValue(;
        description=nothing,
        schema=nothing,
    )

    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation. In addition to the CommonMark syntax, clients can convert process IDs that are formatted as in the following example into links instead of code blocks: &#x60;&#x60;&#x60; &#x60;&#x60;process_id()&#x60;&#x60; &#x60;&#x60;&#x60;
    - schema::ProcessSchema
"""
Base.@kwdef mutable struct ProcessReturnValue <: OpenAPI.APIModel
    description::Union{Nothing, String} = nothing
    schema = nothing # spec type: Union{ Nothing, ProcessSchema }

    function ProcessReturnValue(description, schema, )
        OpenAPI.validate_property(ProcessReturnValue, Symbol("description"), description)
        OpenAPI.validate_property(ProcessReturnValue, Symbol("schema"), schema)
        return new(description, schema, )
    end
end # type ProcessReturnValue

const _property_types_ProcessReturnValue = Dict{Symbol,String}(Symbol("description")=>"String", Symbol("schema")=>"ProcessSchema", )
OpenAPI.property_type(::Type{ ProcessReturnValue }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProcessReturnValue[name]))}

function check_required(o::ProcessReturnValue)
    o.schema === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProcessReturnValue }, name::Symbol, val)
    if name === Symbol("description")
        OpenAPI.validate_param(name, "ProcessReturnValue", :format, val, "commonmark")
    end
end
