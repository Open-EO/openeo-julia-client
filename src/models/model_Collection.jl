# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""collection

    Collection(;
        stac_version=nothing,
        stac_extensions=nothing,
        type=nothing,
        id=nothing,
        title=nothing,
        description=nothing,
        keywords=nothing,
        version=nothing,
        deprecated=false,
        license=nothing,
        providers=nothing,
        extent=nothing,
        links=nothing,
        var"cube:dimensions"=nothing,
        summaries=nothing,
        assets=nothing,
    )

    - stac_version::String : The [version of the STAC specification](https://github.com/radiantearth/stac-spec/releases), which MAY not be equal to the [STAC API version](#tag/EO-Data-Discovery/STAC). Supports versions 0.9.x and 1.x.x.
    - stac_extensions::Vector{StacExtensionsInner} : A list of implemented STAC extensions. The list contains URLs to the JSON Schema files it can be validated against. For STAC &lt; 1.0.0-rc.1  shortcuts such as &#x60;sar&#x60; can be used instead of the schema URL.
    - type::String : For STAC versions &gt;&#x3D; 1.0.0-rc.1 this field is required.
    - id::String : A unique identifier for the collection, which MUST match the specified pattern.
    - title::String : A short descriptive one-line title for the collection.
    - description::String : Detailed multi-line description to explain the collection.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - keywords::Vector{String} : List of keywords describing the collection.
    - version::String : Version of the collection.  This property REQUIRES to add &#x60;version&#x60; (STAC &lt; 1.0.0-rc.1) or &#x60;https://stac-extensions.github.io/version/v1.2.0/schema.json&#x60; (STAC &gt;&#x3D; 1.0.0-rc.1) to the list of &#x60;stac_extensions&#x60;.
    - deprecated::Bool : Specifies that the collection is deprecated with the potential to be removed. It should be transitioned out of usage as soon as possible and users should refrain from using it in new projects.  A link with relation type &#x60;latest-version&#x60; SHOULD be added to the links and MUST refer to the collection that can be used instead.  This property REQUIRES to add &#x60;version&#x60; (STAC &lt; 1.0.0-rc.1) or &#x60;https://stac-extensions.github.io/version/v1.2.0/schema.json&#x60; (STAC &gt;&#x3D; 1.0.0-rc.1) to the list of &#x60;stac_extensions&#x60;.
    - license::String : License(s) of the data as a SPDX [License identifier](https://spdx.org/licenses/). Alternatively, use &#x60;proprietary&#x60; if the license is not on the SPDX license list or &#x60;various&#x60; if multiple licenses apply. In these two cases links to the license texts SHOULD be added, see the &#x60;license&#x60; link relation type.  Non-SPDX licenses SHOULD add a link to the license text with the &#x60;license&#x60; relation in the links section. The license text MUST NOT be provided as a value of this field. If there is no public license URL available, it is RECOMMENDED to host the license text and link to it.
    - providers::Vector{Provider} : A list of providers, which MAY include all organizations capturing or processing the data or the hosting provider. Providers SHOULD be listed in chronological order with the most recent provider being the last element of the list.
    - extent::CollectionExtent
    - links::Vector{Link} : Links related to this collection. Could reference to licensing information, other meta data formats with additional information or a preview image.  It is RECOMMENDED to provide links with the following &#x60;rel&#x60; (relation) types:  1. &#x60;root&#x60; and &#x60;parent&#x60;: URL to the data discovery endpoint at &#x60;/collections&#x60;.  2. &#x60;license&#x60;: A link to the license(s) SHOULD be specified if the &#x60;license&#x60; field is set to &#x60;proprietary&#x60; or &#x60;various&#x60;.  3. &#x60;example&#x60;: Links to examples of processes that use this collection.  4. &#x60;latest-version&#x60;: If a collection has been marked as deprecated, a link SHOULD point to the latest version of the collection. The relation types &#x60;predecessor-version&#x60; (link to older version) and &#x60;successor-version&#x60; (link to newer version) can also be used to show the relation between versions.  5. &#x60;alternate&#x60;: An alternative representation of the collection. For example, this could be the collection available through another catalog service such as OGC CSW, a human-readable HTML version or a metadata document following another standard such as ISO 19115 or DCAT.  6. &#x60;http://www.opengis.net/def/rel/ogc/1.0/queryables&#x60;: URL to the queryables endpoint at &#x60;/collections/{collection_id}/queryables&#x60;. For JSON Schema documents, the &#x60;type&#x60; field must be set to &#x60;application/schema+json&#x60;.  For additional relation types see also the lists of [common relation types in openEO](#section/API-Principles/Web-Linking) and the STAC specification for Collections.
    - var"cube:dimensions"::Dict{String, STACCollectionCubeDimensions} : The named default dimensions of the data cube. Names must be unique per collection.  The keys of the object are the dimension names. For interoperability, it is RECOMMENDED to use the following dimension names if there is only a single dimension with the specified criteria:  * &#x60;x&#x60; for the dimension of type &#x60;spatial&#x60; with the axis set to &#x60;x&#x60; * &#x60;y&#x60; for the dimension of type &#x60;spatial&#x60; with the axis set to &#x60;y&#x60; * &#x60;z&#x60; for the dimension of type &#x60;spatial&#x60; with the axis set to &#x60;z&#x60; * &#x60;t&#x60; for the dimension of type &#x60;temporal&#x60; * &#x60;bands&#x60; for dimensions of type &#x60;bands&#x60; * &#x60;geometry&#x60; for dimensions of type &#x60;geometry&#x60;  This property REQUIRES to add a version of the data cube extension to the list of &#x60;stac_extensions&#x60;, e.g. &#x60;https://stac-extensions.github.io/datacube/v2.2.0/schema.json&#x60;.
    - summaries::Dict{String, STACSummariesCollectionProperties} : Collection properties from STAC extensions (e.g. EO, SAR, Satellite or Scientific) or even custom extensions.  Summaries are either a unique set of all available values, statistics *or* a JSON Schema. Statistics only specify the range (minimum and maximum values) by default, but can optionally be accompanied by additional statistical values. The range can specify the potential range of values, but it is recommended to be as precise as possible. The set of values MUST contain at least one element and it is strongly RECOMMENDED to list all values. It is recommended to list as many properties as reasonable so that consumers get a full overview of the Collection. Properties that are covered by the Collection specification (e.g. &#x60;providers&#x60; and &#x60;license&#x60;) SHOULD NOT be repeated in the summaries.  Potential fields for the summaries can be found here:  * **[STAC Common Metadata](https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/common-metadata.md)**:   A list of commonly used fields throughout all domains * **[Content Extensions](https://github.com/radiantearth/stac-spec/blob/v1.0.0/extensions/README.md#list-of-content-extensions)**:   Domain-specific fields for domains such as EO, SAR and point clouds. * **Custom Properties**:   It is generally allowed to add custom fields.
    - assets::Dict{String, Asset} : Dictionary of asset objects for data that can be downloaded, each with a unique key. The keys MAY be used by clients as file names.
"""
Base.@kwdef mutable struct Collection <: OpenAPI.APIModel
    stac_version::Union{Nothing, String} = nothing
    stac_extensions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{StacExtensionsInner} }
    type::Union{Nothing, String} = nothing
    id::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    keywords::Union{Nothing, Vector{String}} = nothing
    version::Union{Nothing, String} = nothing
    deprecated::Union{Nothing, Bool} = false
    license::Union{Nothing, String} = nothing
    providers::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Provider} }
    extent = nothing # spec type: Union{ Nothing, CollectionExtent }
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }
    var"cube:dimensions"::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, STACCollectionCubeDimensions} }
    summaries::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, STACSummariesCollectionProperties} }
    assets::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Asset} }

    function Collection(stac_version, stac_extensions, type, id, title, description, keywords, version, deprecated, license, providers, extent, links, var"cube:dimensions", summaries, assets, )
        OpenAPI.validate_property(Collection, Symbol("stac_version"), stac_version)
        OpenAPI.validate_property(Collection, Symbol("stac_extensions"), stac_extensions)
        OpenAPI.validate_property(Collection, Symbol("type"), type)
        OpenAPI.validate_property(Collection, Symbol("id"), id)
        OpenAPI.validate_property(Collection, Symbol("title"), title)
        OpenAPI.validate_property(Collection, Symbol("description"), description)
        OpenAPI.validate_property(Collection, Symbol("keywords"), keywords)
        OpenAPI.validate_property(Collection, Symbol("version"), version)
        OpenAPI.validate_property(Collection, Symbol("deprecated"), deprecated)
        OpenAPI.validate_property(Collection, Symbol("license"), license)
        OpenAPI.validate_property(Collection, Symbol("providers"), providers)
        OpenAPI.validate_property(Collection, Symbol("extent"), extent)
        OpenAPI.validate_property(Collection, Symbol("links"), links)
        OpenAPI.validate_property(Collection, Symbol("cube:dimensions"), var"cube:dimensions")
        OpenAPI.validate_property(Collection, Symbol("summaries"), summaries)
        OpenAPI.validate_property(Collection, Symbol("assets"), assets)
        return new(stac_version, stac_extensions, type, id, title, description, keywords, version, deprecated, license, providers, extent, links, var"cube:dimensions", summaries, assets, )
    end
end # type Collection

const _property_types_Collection = Dict{Symbol,String}(Symbol("stac_version")=>"String", Symbol("stac_extensions")=>"Vector{StacExtensionsInner}", Symbol("type")=>"String", Symbol("id")=>"String", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("keywords")=>"Vector{String}", Symbol("version")=>"String", Symbol("deprecated")=>"Bool", Symbol("license")=>"String", Symbol("providers")=>"Vector{Provider}", Symbol("extent")=>"CollectionExtent", Symbol("links")=>"Vector{Link}", Symbol("cube:dimensions")=>"Dict{String, STACCollectionCubeDimensions}", Symbol("summaries")=>"Dict{String, STACSummariesCollectionProperties}", Symbol("assets")=>"Dict{String, Asset}", )
OpenAPI.property_type(::Type{ Collection }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Collection[name]))}

function check_required(o::Collection)
    o.stac_version === nothing && (return false)
    o.id === nothing && (return false)
    o.description === nothing && (return false)
    o.license === nothing && (return false)
    o.extent === nothing && (return false)
    o.links === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Collection }, name::Symbol, val)
    if name === Symbol("stac_version")
        OpenAPI.validate_param(name, "Collection", :pattern, val, r"^(0\.9.\d+|1\.\d+.\d+)")
    end
    if name === Symbol("stac_extensions")
        OpenAPI.validate_param(name, "Collection", :uniqueItems, val, true)
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "Collection", :enum, val, ["Collection"])
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "Collection", :pattern, val, r"^[\w\-\.~\/]+$")
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "Collection", :format, val, "commonmark")
    end
end
