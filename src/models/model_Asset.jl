# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""asset

    Asset(;
        href=nothing,
        title=nothing,
        description=nothing,
        type=nothing,
        roles=nothing,
    )

    - href::String : URL to the downloadable asset. The URLs SHOULD be available without authentication so that external clients can download them easily. If the data is confidential, signed URLs SHOULD be used to protect against unauthorized access from third parties.
    - title::String : The displayed title for clients and users.
    - description::String : Multi-line description to explain the asset.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - type::String : Media type of the asset.
    - roles::Vector{String} : Purposes of the asset. Can be any value, but commonly used values are:  * &#x60;thumbnail&#x60;: A visualization of the data, usually a lower-resolution true color image in JPEG or PNG format. * &#x60;reproducibility&#x60;: Information how the data was produced and/or can be reproduced, e.g. the process graph used to compute the data in JSON format. * &#x60;data&#x60;: The computed data in the format specified by the user in the process graph (applicable in &#x60;GET /jobs/{job_id}/results&#x60; only). * &#x60;metadata&#x60;: Additional metadata available for the computed data.
"""
Base.@kwdef mutable struct Asset <: OpenAPI.APIModel
    href::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    roles::Union{Nothing, Vector{String}} = nothing

    function Asset(href, title, description, type, roles, )
        OpenAPI.validate_property(Asset, Symbol("href"), href)
        OpenAPI.validate_property(Asset, Symbol("title"), title)
        OpenAPI.validate_property(Asset, Symbol("description"), description)
        OpenAPI.validate_property(Asset, Symbol("type"), type)
        OpenAPI.validate_property(Asset, Symbol("roles"), roles)
        return new(href, title, description, type, roles, )
    end
end # type Asset

const _property_types_Asset = Dict{Symbol,String}(Symbol("href")=>"String", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("type")=>"String", Symbol("roles")=>"Vector{String}", )
OpenAPI.property_type(::Type{ Asset }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Asset[name]))}

function check_required(o::Asset)
    o.href === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Asset }, name::Symbol, val)
    if name === Symbol("description")
        OpenAPI.validate_param(name, "Asset", :format, val, "commonmark")
    end
end
