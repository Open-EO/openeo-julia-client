# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""dimension_spatial_vertical

    DimensionSpatialVertical(;
        type=nothing,
        description=nothing,
        axis=nothing,
        extent=nothing,
        values=nothing,
        step=nothing,
        reference_system=nothing,
    )

    - type::String : Type of the dimension.
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - axis::DimensionAxisXyz
    - extent::Vector{Float64} : Extent (lower and upper bounds) of the dimension as two-dimensional array. Open intervals with &#x60;null&#x60; are not allowed.
    - values::Vector{Float64} : A set of all potential values.
    - step::Float64 : If the dimension consists of [interval](https://en.wikipedia.org/wiki/Level_of_measurement#Interval_scale) values, the space between the values. Use &#x60;null&#x60; for irregularly spaced steps.
    - reference_system::CollectionDimensionSrs
"""
Base.@kwdef mutable struct DimensionSpatialVertical <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    axis = nothing # spec type: Union{ Nothing, DimensionAxisXyz }
    extent::Union{Nothing, Vector{Float64}} = nothing
    values::Union{Nothing, Vector{Float64}} = nothing
    step::Union{Nothing, Float64} = nothing
    reference_system = nothing # spec type: Union{ Nothing, CollectionDimensionSrs }

    function DimensionSpatialVertical(type, description, axis, extent, values, step, reference_system, )
        OpenAPI.validate_property(DimensionSpatialVertical, Symbol("type"), type)
        OpenAPI.validate_property(DimensionSpatialVertical, Symbol("description"), description)
        OpenAPI.validate_property(DimensionSpatialVertical, Symbol("axis"), axis)
        OpenAPI.validate_property(DimensionSpatialVertical, Symbol("extent"), extent)
        OpenAPI.validate_property(DimensionSpatialVertical, Symbol("values"), values)
        OpenAPI.validate_property(DimensionSpatialVertical, Symbol("step"), step)
        OpenAPI.validate_property(DimensionSpatialVertical, Symbol("reference_system"), reference_system)
        return new(type, description, axis, extent, values, step, reference_system, )
    end
end # type DimensionSpatialVertical

const _property_types_DimensionSpatialVertical = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("description")=>"String", Symbol("axis")=>"DimensionAxisXyz", Symbol("extent")=>"Vector{Float64}", Symbol("values")=>"Vector{Float64}", Symbol("step")=>"Float64", Symbol("reference_system")=>"CollectionDimensionSrs", )
OpenAPI.property_type(::Type{ DimensionSpatialVertical }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DimensionSpatialVertical[name]))}

function check_required(o::DimensionSpatialVertical)
    o.type === nothing && (return false)
    o.axis === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DimensionSpatialVertical }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "DimensionSpatialVertical", :enum, val, ["spatial", "temporal", "bands", "geometry", "other"])
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "DimensionSpatialVertical", :format, val, "commonmark")
    end
    if name === Symbol("extent")
        OpenAPI.validate_param(name, "DimensionSpatialVertical", :maxItems, val, 2)
        OpenAPI.validate_param(name, "DimensionSpatialVertical", :minItems, val, 2)
    end
    if name === Symbol("values")
        OpenAPI.validate_param(name, "DimensionSpatialVertical", :minItems, val, 1)
    end
end
