# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Update_Batch_Job_Request

    UpdateBatchJobRequest(;
        title=nothing,
        description=nothing,
        process=nothing,
        plan=nothing,
        budget=nothing,
        log_level=nothing,
    )

    - title::String : A short description to easily distinguish entities.
    - description::String : Detailed multi-line description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - process::ProcessGraphWithMetadata
    - plan::String : The billing plan to process and charge the job or service with.  Billing plans MUST be accepted in a *case insensitive* manner. Back-ends MUST resolve the billing plan in the following way if billing is supported:  * If a value is given and it is not &#x60;null&#x60;: Persist the &#x60;plan&#x60; that has been provided in the request. * Otherwise, don&#39;t change the billing plan.  Billing plans not on the list of available plans MUST be rejected with openEO error &#x60;BillingPlanInvalid&#x60;.
    - budget::Float64 : Maximum amount of costs the request is allowed to produce. The value MUST be specified in the currency of the back-end. No limits apply, if the value is &#x60;null&#x60;.
    - log_level::MinLogLevelUpdate
"""
Base.@kwdef mutable struct UpdateBatchJobRequest <: OpenAPI.APIModel
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    process = nothing # spec type: Union{ Nothing, ProcessGraphWithMetadata }
    plan::Union{Nothing, String} = nothing
    budget::Union{Nothing, Float64} = nothing
    log_level = nothing # spec type: Union{ Nothing, MinLogLevelUpdate }

    function UpdateBatchJobRequest(title, description, process, plan, budget, log_level, )
        OpenAPI.validate_property(UpdateBatchJobRequest, Symbol("title"), title)
        OpenAPI.validate_property(UpdateBatchJobRequest, Symbol("description"), description)
        OpenAPI.validate_property(UpdateBatchJobRequest, Symbol("process"), process)
        OpenAPI.validate_property(UpdateBatchJobRequest, Symbol("plan"), plan)
        OpenAPI.validate_property(UpdateBatchJobRequest, Symbol("budget"), budget)
        OpenAPI.validate_property(UpdateBatchJobRequest, Symbol("log_level"), log_level)
        return new(title, description, process, plan, budget, log_level, )
    end
end # type UpdateBatchJobRequest

const _property_types_UpdateBatchJobRequest = Dict{Symbol,String}(Symbol("title")=>"String", Symbol("description")=>"String", Symbol("process")=>"ProcessGraphWithMetadata", Symbol("plan")=>"String", Symbol("budget")=>"Float64", Symbol("log_level")=>"MinLogLevelUpdate", )
OpenAPI.property_type(::Type{ UpdateBatchJobRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_UpdateBatchJobRequest[name]))}

function check_required(o::UpdateBatchJobRequest)
    true
end

function OpenAPI.validate_property(::Type{ UpdateBatchJobRequest }, name::Symbol, val)
    if name === Symbol("description")
        OpenAPI.validate_param(name, "UpdateBatchJobRequest", :format, val, "commonmark")
    end
    if name === Symbol("budget")
        OpenAPI.validate_param(name, "UpdateBatchJobRequest", :minimum, val, 0, false)
    end
end
