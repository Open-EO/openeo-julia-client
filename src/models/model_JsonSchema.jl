# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""json_schema
A JSON Schema compliant to [JSON Schema draft-07](https://json-schema.org/draft-07/json-schema-validation.html) or later.  JSON Schemas SHOULD always be dereferenced (i.e. all &#x60;$refs&#x60; should be resolved). This allows clients to consume the schemas much better. Clients are not expected to support dereferencing &#x60;$refs&#x60;.  Note: The specified schema in the OpenAPI document is only a common subset of JSON Schema. Additional keywords from the JSON Schema specification MAY be used.

    JsonSchema(;
        var"$schema"="http://json-schema.org/draft-07/schema#",
        var"$id"=nothing,
        type=nothing,
        pattern=nothing,
        enum=nothing,
        minimum=nothing,
        maximum=nothing,
        minItems=0,
        maxItems=nothing,
        items=nothing,
    )

    - var"$schema"::String : The JSON Schema version. If not given in the context of openEO, defaults to &#x60;draft-07&#x60;.  You may need to add the default value for &#x60;$schema&#x60; property explicitly to the JSON Schema object before passing it to a JSON Schema validator.
    - var"$id"::String : ID of your JSON Schema.
    - type::JsonSchemaType1
    - pattern::String : The regular expression a string value must match against.
    - enum::Vector{Any} : An exclusive list of allowed values.
    - minimum::Float64 : The minimum value (inclusive) allowed for a numerical value.
    - maximum::Float64 : The maximum value (inclusive) allowed for a numerical value.
    - minItems::Float64 : The minimum number of items required in an array.
    - maxItems::Float64 : The maximum number of items required in an array.
    - items::JsonSchemaItems
"""
Base.@kwdef mutable struct JsonSchema <: OpenAPI.APIModel
    var"$schema"::Union{Nothing, String} = "http://json-schema.org/draft-07/schema#"
    var"$id"::Union{Nothing, String} = nothing
    type = nothing # spec type: Union{ Nothing, JsonSchemaType1 }
    pattern::Union{Nothing, String} = nothing
    enum::Union{Nothing, Vector{Any}} = nothing
    minimum::Union{Nothing, Float64} = nothing
    maximum::Union{Nothing, Float64} = nothing
    minItems::Union{Nothing, Float64} = 0
    maxItems::Union{Nothing, Float64} = nothing
    items = nothing # spec type: Union{ Nothing, JsonSchemaItems }

    function JsonSchema(var"$schema", var"$id", type, pattern, enum, minimum, maximum, minItems, maxItems, items, )
        OpenAPI.validate_property(JsonSchema, Symbol("\$schema"), var"$schema")
        OpenAPI.validate_property(JsonSchema, Symbol("\$id"), var"$id")
        OpenAPI.validate_property(JsonSchema, Symbol("type"), type)
        OpenAPI.validate_property(JsonSchema, Symbol("pattern"), pattern)
        OpenAPI.validate_property(JsonSchema, Symbol("enum"), enum)
        OpenAPI.validate_property(JsonSchema, Symbol("minimum"), minimum)
        OpenAPI.validate_property(JsonSchema, Symbol("maximum"), maximum)
        OpenAPI.validate_property(JsonSchema, Symbol("minItems"), minItems)
        OpenAPI.validate_property(JsonSchema, Symbol("maxItems"), maxItems)
        OpenAPI.validate_property(JsonSchema, Symbol("items"), items)
        return new(var"$schema", var"$id", type, pattern, enum, minimum, maximum, minItems, maxItems, items, )
    end
end # type JsonSchema

const _property_types_JsonSchema = Dict{Symbol,String}(Symbol("\$schema")=>"String", Symbol("\$id")=>"String", Symbol("type")=>"JsonSchemaType1", Symbol("pattern")=>"String", Symbol("enum")=>"Vector{Any}", Symbol("minimum")=>"Float64", Symbol("maximum")=>"Float64", Symbol("minItems")=>"Float64", Symbol("maxItems")=>"Float64", Symbol("items")=>"JsonSchemaItems", )
OpenAPI.property_type(::Type{ JsonSchema }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_JsonSchema[name]))}

function check_required(o::JsonSchema)
    true
end

function OpenAPI.validate_property(::Type{ JsonSchema }, name::Symbol, val)
    if name === Symbol("\$schema")
        OpenAPI.validate_param(name, "JsonSchema", :format, val, "uri")
    end
    if name === Symbol("\$id")
        OpenAPI.validate_param(name, "JsonSchema", :format, val, "uri")
    end
    if name === Symbol("pattern")
        OpenAPI.validate_param(name, "JsonSchema", :format, val, "regex")
    end
    if name === Symbol("minItems")
        OpenAPI.validate_param(name, "JsonSchema", :minimum, val, 0, false)
    end
    if name === Symbol("maxItems")
        OpenAPI.validate_param(name, "JsonSchema", :minimum, val, 0, false)
    end
end
