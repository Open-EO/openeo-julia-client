# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""dimension_other

    DimensionOther(;
        type=nothing,
        description=nothing,
        extent=nothing,
        values=nothing,
        step=nothing,
        unit=nothing,
        reference_system=nothing,
    )

    - type::String : Type of the dimension.
    - description::String : Detailed description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - extent::Vector{Float64} : If the dimension consists of [ordinal](https://en.wikipedia.org/wiki/Level_of_measurement#Ordinal_scale) values, the extent (lower and upper bounds) of the values as two-dimensional array. Use &#x60;null&#x60; for open intervals.
    - values::Vector{CollectionDimensionValuesInner} : A set of all potential values, especially useful for [nominal](https://en.wikipedia.org/wiki/Level_of_measurement#Nominal_level) values.  **Important:** The order of the values MUST be exactly how the dimension values are also ordered in the data (cube). If the values specify band names, the values MUST be in the same order as they are in the corresponding band fields (i.e. &#x60;eo:bands&#x60; or &#x60;sar:bands&#x60;).
    - step::Float64 : If the dimension consists of [interval](https://en.wikipedia.org/wiki/Level_of_measurement#Interval_scale) values, the space between the values. Use &#x60;null&#x60; for irregularly spaced steps.
    - unit::String : The unit of measurement for the data, preferably compliant to [UDUNITS-2](https://ncics.org/portfolio/other-resources/udunits2/) units (singular).
    - reference_system::String : The reference system for the dimension.
"""
Base.@kwdef mutable struct DimensionOther <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    extent::Union{Nothing, Vector{Float64}} = nothing
    values::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CollectionDimensionValuesInner} }
    step::Union{Nothing, Float64} = nothing
    unit::Union{Nothing, String} = nothing
    reference_system::Union{Nothing, String} = nothing

    function DimensionOther(type, description, extent, values, step, unit, reference_system, )
        OpenAPI.validate_property(DimensionOther, Symbol("type"), type)
        OpenAPI.validate_property(DimensionOther, Symbol("description"), description)
        OpenAPI.validate_property(DimensionOther, Symbol("extent"), extent)
        OpenAPI.validate_property(DimensionOther, Symbol("values"), values)
        OpenAPI.validate_property(DimensionOther, Symbol("step"), step)
        OpenAPI.validate_property(DimensionOther, Symbol("unit"), unit)
        OpenAPI.validate_property(DimensionOther, Symbol("reference_system"), reference_system)
        return new(type, description, extent, values, step, unit, reference_system, )
    end
end # type DimensionOther

const _property_types_DimensionOther = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("description")=>"String", Symbol("extent")=>"Vector{Float64}", Symbol("values")=>"Vector{CollectionDimensionValuesInner}", Symbol("step")=>"Float64", Symbol("unit")=>"String", Symbol("reference_system")=>"String", )
OpenAPI.property_type(::Type{ DimensionOther }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DimensionOther[name]))}

function check_required(o::DimensionOther)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DimensionOther }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "DimensionOther", :enum, val, ["spatial", "temporal", "bands", "geometry", "other"])
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "DimensionOther", :format, val, "commonmark")
    end
    if name === Symbol("extent")
        OpenAPI.validate_param(name, "DimensionOther", :maxItems, val, 2)
        OpenAPI.validate_param(name, "DimensionOther", :minItems, val, 2)
    end
    if name === Symbol("values")
        OpenAPI.validate_param(name, "DimensionOther", :minItems, val, 1)
    end
end
