# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""describe_service_200_response

    DescribeService200Response(;
        id=nothing,
        title=nothing,
        description=nothing,
        url=nothing,
        type=nothing,
        enabled=nothing,
        process=nothing,
        configuration=nothing,
        attributes=nothing,
        created=nothing,
        plan=nothing,
        costs=nothing,
        budget=nothing,
        usage=nothing,
        log_level=nothing,
    )

    - id::String : A per-backend unique identifier of the secondary web service, generated by the back-end during creation. MUST match the specified pattern.
    - title::String : A short description to easily distinguish entities.
    - description::String : Detailed multi-line description to explain the entity.  [CommonMark 0.29](http://commonmark.org/) syntax MAY be used for rich text representation.
    - url::String : URL at which the secondary web service is accessible. Doesn&#39;t necessarily need to be located within the API.
    - type::String : Definition of the service type to access result data. All available service types can be retrieved via &#x60;GET /service_types&#x60;. Service types MUST be accepted in a *case insensitive* manner.
    - enabled::Bool : Describes whether a secondary web service is responding to requests (true) or not (false). Disabled services don&#39;t produce any costs.
    - process::ProcessGraphWithMetadata
    - configuration::Any : Map of configuration settings, i.e. the setting names supported by the secondary web service combined with actual values. See &#x60;GET /service_types&#x60; for supported configuration settings. For example, this could specify the required version of the service, visualization details or any other service dependant configuration.
    - attributes::Any : Additional attributes of the secondary web service, e.g. available layers for a WMS based on the bands in the underlying GeoTiff.
    - created::ZonedDateTime : Date and time of creation, formatted as a [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339.html) date-time.
    - plan::String : The billing plan to process and charge the job or service with.  Billing plans MUST be handled in a *case insensitive* manner.  The plans can be retrieved from &#x60;GET /&#x60;, but the value returned here may not be in the list of plans any longer.
    - costs::Float64 : An amount of money or credits. The value MUST be specified in the currency the back-end is working with. The currency can be retrieved by calling &#x60;GET /&#x60;. If no currency is set, this field MUST be &#x60;null&#x60;.
    - budget::Float64 : Maximum amount of costs the request is allowed to produce. The value MUST be specified in the currency of the back-end. No limits apply, if the value is &#x60;null&#x60; or the back-end has no currency set in &#x60;GET /&#x60;.
    - usage::ServiceUsage
    - log_level::MinLogLevelDefault
"""
Base.@kwdef mutable struct DescribeService200Response <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    title::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    url::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    enabled::Union{Nothing, Bool} = nothing
    process = nothing # spec type: Union{ Nothing, ProcessGraphWithMetadata }
    configuration::Union{Nothing, Any} = nothing
    attributes::Union{Nothing, Any} = nothing
    created::Union{Nothing, ZonedDateTime} = nothing
    plan::Union{Nothing, String} = nothing
    costs::Union{Nothing, Float64} = nothing
    budget::Union{Nothing, Float64} = nothing
    usage = nothing # spec type: Union{ Nothing, ServiceUsage }
    log_level = nothing # spec type: Union{ Nothing, MinLogLevelDefault }

    function DescribeService200Response(id, title, description, url, type, enabled, process, configuration, attributes, created, plan, costs, budget, usage, log_level, )
        OpenAPI.validate_property(DescribeService200Response, Symbol("id"), id)
        OpenAPI.validate_property(DescribeService200Response, Symbol("title"), title)
        OpenAPI.validate_property(DescribeService200Response, Symbol("description"), description)
        OpenAPI.validate_property(DescribeService200Response, Symbol("url"), url)
        OpenAPI.validate_property(DescribeService200Response, Symbol("type"), type)
        OpenAPI.validate_property(DescribeService200Response, Symbol("enabled"), enabled)
        OpenAPI.validate_property(DescribeService200Response, Symbol("process"), process)
        OpenAPI.validate_property(DescribeService200Response, Symbol("configuration"), configuration)
        OpenAPI.validate_property(DescribeService200Response, Symbol("attributes"), attributes)
        OpenAPI.validate_property(DescribeService200Response, Symbol("created"), created)
        OpenAPI.validate_property(DescribeService200Response, Symbol("plan"), plan)
        OpenAPI.validate_property(DescribeService200Response, Symbol("costs"), costs)
        OpenAPI.validate_property(DescribeService200Response, Symbol("budget"), budget)
        OpenAPI.validate_property(DescribeService200Response, Symbol("usage"), usage)
        OpenAPI.validate_property(DescribeService200Response, Symbol("log_level"), log_level)
        return new(id, title, description, url, type, enabled, process, configuration, attributes, created, plan, costs, budget, usage, log_level, )
    end
end # type DescribeService200Response

const _property_types_DescribeService200Response = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("title")=>"String", Symbol("description")=>"String", Symbol("url")=>"String", Symbol("type")=>"String", Symbol("enabled")=>"Bool", Symbol("process")=>"ProcessGraphWithMetadata", Symbol("configuration")=>"Any", Symbol("attributes")=>"Any", Symbol("created")=>"ZonedDateTime", Symbol("plan")=>"String", Symbol("costs")=>"Float64", Symbol("budget")=>"Float64", Symbol("usage")=>"ServiceUsage", Symbol("log_level")=>"MinLogLevelDefault", )
OpenAPI.property_type(::Type{ DescribeService200Response }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DescribeService200Response[name]))}

function check_required(o::DescribeService200Response)
    o.id === nothing && (return false)
    o.url === nothing && (return false)
    o.type === nothing && (return false)
    o.enabled === nothing && (return false)
    o.process === nothing && (return false)
    o.configuration === nothing && (return false)
    o.attributes === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DescribeService200Response }, name::Symbol, val)
    if name === Symbol("id")
        OpenAPI.validate_param(name, "DescribeService200Response", :pattern, val, r"^[\w\-\.~]+$")
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "DescribeService200Response", :format, val, "commonmark")
    end
    if name === Symbol("url")
        OpenAPI.validate_param(name, "DescribeService200Response", :format, val, "uri")
    end
    if name === Symbol("created")
        OpenAPI.validate_param(name, "DescribeService200Response", :format, val, "date-time")
    end
    if name === Symbol("costs")
        OpenAPI.validate_param(name, "DescribeService200Response", :minimum, val, 0, false)
    end
    if name === Symbol("budget")
        OpenAPI.validate_param(name, "DescribeService200Response", :minimum, val, 0, false)
    end
end
