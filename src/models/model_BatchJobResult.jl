# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""batch_job_result
The STAC specification should be the main guidance for implementing this. Specifying the &#x60;bbox&#x60; is strongly RECOMMENDED for STAC compliance, but can be omitted if the result is unlocated and the &#x60;geometry&#x60; is set to &#x60;null&#x60;.

    BatchJobResult(;
        stac_version=nothing,
        stac_extensions=nothing,
        id=nothing,
        type=nothing,
        bbox=nothing,
        geometry=nothing,
        properties=nothing,
        assets=nothing,
        links=nothing,
    )

    - stac_version::String : The [version of the STAC specification](https://github.com/radiantearth/stac-spec/releases), which MAY not be equal to the [STAC API version](#tag/EO-Data-Discovery/STAC). Supports versions 0.9.x and 1.x.x.
    - stac_extensions::Vector{StacExtensionsInner} : A list of implemented STAC extensions. The list contains URLs to the JSON Schema files it can be validated against. For STAC &lt; 1.0.0-rc.1  shortcuts such as &#x60;sar&#x60; can be used instead of the schema URL.
    - id::String : Per-backend unique identifier of the batch job, generated by the back-end during creation. MUST match the specified pattern.
    - type::String : The GeoJSON type that applies to this metadata document, which MUST always be a \&quot;Feature\&quot; according to the STAC specification. This type does **not** describe the spatial data type of the assets.
    - bbox::Vector{Float64} : Each bounding box is provided as four or six numbers, depending on whether the coordinate reference system includes a vertical axis (height or depth):  * West (lower left corner, coordinate axis 1) * South (lower left corner, coordinate axis 2) * Base (optional, minimum value, coordinate axis 3) * East (upper right corner, coordinate axis 1) * North (upper right corner, coordinate axis 2) * Height (optional, maximum value, coordinate axis 3)  The coordinate reference system of the values is WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84).  For WGS 84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude.  However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).  If the vertical axis is included, the third and the sixth number are the bottom and the top of the 3-dimensional bounding box.
    - geometry::BatchJobResultGeometry
    - properties::ItemProperties
    - assets::Dict{String, Asset} : Dictionary of asset objects for data that can be downloaded, each with a unique key. The keys MAY be used by clients as file names.
    - links::Vector{Link} : Links related to this batch job result, e.g. a link to an  invoice, additional log files or external documentation.  The links MUST NOT contain links to the processed and downloadable data. Instead specify these in the &#x60;assets&#x60; property. Clients MUST NOT download the data referenced in the links by default.  It is **strongly recommended** to add a link with relation type &#x60;canonical&#x60;, which points to this STAC document using a signed URL. This way the STAC metadata can be used by non-openEO clients without additional authentication steps.  For relation types see the lists of [common relation types in openEO](#section/API-Principles/Web-Linking).
"""
Base.@kwdef mutable struct BatchJobResult <: OpenAPI.APIModel
    stac_version::Union{Nothing, String} = nothing
    stac_extensions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{StacExtensionsInner} }
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    bbox::Union{Nothing, Vector{Float64}} = nothing
    geometry = nothing # spec type: Union{ Nothing, BatchJobResultGeometry }
    properties = nothing # spec type: Union{ Nothing, ItemProperties }
    assets::Union{Nothing, Dict} = nothing # spec type: Union{ Nothing, Dict{String, Asset} }
    links::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Link} }

    function BatchJobResult(stac_version, stac_extensions, id, type, bbox, geometry, properties, assets, links, )
        OpenAPI.validate_property(BatchJobResult, Symbol("stac_version"), stac_version)
        OpenAPI.validate_property(BatchJobResult, Symbol("stac_extensions"), stac_extensions)
        OpenAPI.validate_property(BatchJobResult, Symbol("id"), id)
        OpenAPI.validate_property(BatchJobResult, Symbol("type"), type)
        OpenAPI.validate_property(BatchJobResult, Symbol("bbox"), bbox)
        OpenAPI.validate_property(BatchJobResult, Symbol("geometry"), geometry)
        OpenAPI.validate_property(BatchJobResult, Symbol("properties"), properties)
        OpenAPI.validate_property(BatchJobResult, Symbol("assets"), assets)
        OpenAPI.validate_property(BatchJobResult, Symbol("links"), links)
        return new(stac_version, stac_extensions, id, type, bbox, geometry, properties, assets, links, )
    end
end # type BatchJobResult

const _property_types_BatchJobResult = Dict{Symbol,String}(Symbol("stac_version")=>"String", Symbol("stac_extensions")=>"Vector{StacExtensionsInner}", Symbol("id")=>"String", Symbol("type")=>"String", Symbol("bbox")=>"Vector{Float64}", Symbol("geometry")=>"BatchJobResultGeometry", Symbol("properties")=>"ItemProperties", Symbol("assets")=>"Dict{String, Asset}", Symbol("links")=>"Vector{Link}", )
OpenAPI.property_type(::Type{ BatchJobResult }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_BatchJobResult[name]))}

function check_required(o::BatchJobResult)
    o.stac_version === nothing && (return false)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.geometry === nothing && (return false)
    o.properties === nothing && (return false)
    o.assets === nothing && (return false)
    o.links === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ BatchJobResult }, name::Symbol, val)
    if name === Symbol("stac_version")
        OpenAPI.validate_param(name, "BatchJobResult", :pattern, val, r"^(0\.9.\d+|1\.\d+.\d+)")
    end
    if name === Symbol("stac_extensions")
        OpenAPI.validate_param(name, "BatchJobResult", :uniqueItems, val, true)
    end
    if name === Symbol("id")
        OpenAPI.validate_param(name, "BatchJobResult", :pattern, val, r"^[\w\-\.~]+$")
    end
    if name === Symbol("type")
        OpenAPI.validate_param(name, "BatchJobResult", :enum, val, ["Feature"])
    end
end
